# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OykHH7UuWcLxzeNxbYQSiJt-JMxpeJYO
"""

import pandas as pd

from google.colab import files

uploaded=files.upload()

df=pd.read_stata("ESARO Analysis Data.dta")

df.head()

df.info()

df.describe()

from google.colab import data_table
data_table.enable_dataframe_formatter()

df   # just type the DataFrame name

df_bin = df.copy()

df_bin.head()

for col in df_bin.columns:
    if col != "country":   # adjust if your country column has a different name
        df_bin[col] = df_bin[col].astype(str).str.strip().str.lower()

df_bin.head()

# map text values to numeric
mapping = {
    "checked": 1,
    "✓": 1,
    "yes": 1,
    "1": 1,
    "unchecked": 0,
    "✗": 0,
    "no": 0,
    "0": 0,
    "nan": 0,    # missing values
    "": 0
}

for col in df_bin.columns:
    if col != "country":
        df_bin[col] = df_bin[col].map(mapping).fillna(0).astype(int)

df_bin.head()

df_bin1 = df_bin.copy()

df_bin1

df_bin1

pd.set_option("display.max_columns", None)

df_bin1

funder_cols = [f"mpdsr_resource___{i}" for i in range(1, 14)]

funder_cols

df.fun = df_bin1[["country"] + funder_cols]

df.fun.head()

# mapping of old to new names
funder_mapping = {
    "mpdsr_resource___1": "Government",
    "mpdsr_resource___2": "WHO",
    "mpdsr_resource___3": "UNICEF",
    "mpdsr_resource___4": "UNFPA",
    "mpdsr_resource___5": "USAID",
    "mpdsr_resource___6": "World Bank",
    "mpdsr_resource___7": "DFID",
    "mpdsr_resource___8": "EU",
    "mpdsr_resource___9": "GAVI",
    "mpdsr_resource___10": "NGOs",
    "mpdsr_resource___11": "Private Sector",
    "mpdsr_resource___12": "Philanthropy",
    "mpdsr_resource___13": "Other"
}

# Apply renaming

plt.savefig("bubble_plot_hd.png", dpi=600, bbox_inches="tight")

files.download("bubble_plot_hd.png")

df.fun

df.fun = df.fun.rename(columns=funder_mapping)

df.fun.head()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns



df_long = df_long[df_long["HasFunder"] == 1]

df_long

import pandas as pd
import random

# List of 18 East African countries
countries = [
    "Kenya", "Uganda", "Tanzania", "Rwanda", "Burundi",
    "South Sudan", "Ethiopia", "Eritrea", "Djibouti", "Somalia",
    "Comoros", "Seychelles", "Mauritius", "Madagascar", "Sudan",
    "DR Congo", "Mozambique", "Malawi"
]

# Possible values
policy_status = ["Yes", "No"]

# Create random dataset
yulu = pd.DataFrame({
    "Country": countries,
    "2019": [random.choice(policy_status) for _ in countries],
    "2020": [random.choice(policy_status) for _ in countries],
    "2024": [random.choice(policy_status) for _ in countries],
})

print(yulu)

files.download("bubble_plot_hd.png")

df_long

df_long = df_long[df_long['HasFunder'] == 1]
df_long.head()

df_pivot = df_long.pivot_table(
    index='country',
    columns='Funder',
    values='HasFunder',
    aggfunc='sum',
    fill_value=0
)

# Horizontal stacked bar chart
ax = df_pivot.plot(
    kind='barh',
    stacked=True,
    figsize=(68,44),
    edgecolor='none'
)

# Remove plot borders
for spine in ax.spines.values():
    spine.set_visible(False)

# Remove tick marks on both axes
ax.tick_params(axis='y', which='both', length=0, labelsize=45, pad=10)  # y-axis
ax.tick_params(axis='x', which='both', length=0, labelsize=45, pad=10)  # x-axis

# Place legend below plot and remove border
ax.legend(
    title='Funder Type',
    title_fontsize=50,      # legend title
    fontsize=50,            # legend labels
    loc='upper center',
    bbox_to_anchor=(0.5, -0.15),
    ncol=len(df_pivot.columns),
    frameon=False
)

# Set x-axis ticks at interval of 1
max_count = df_pivot.sum(axis=1).max()  # maximum total funders in a country
ax.set_xticks(np.arange(0, max_count + 1, 1))  # ticks every 1

# Add light vertical grid lines
ax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5, alpha=1)  # vertical lines only
ax.yaxis.grid(False)  # remove horizontal grid lines if any

plt.title('MPDSR Funders', fontsize=80, weight="bold",pad=40)
plt.xlabel('Number of Funders', fontsize=65, weight="bold")
plt.ylabel('Country',  fontsize=65, weight="bold")
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Assuming df_long exists, create the pivot table
df_pivot = df_long.pivot_table(
    index='country',
    columns='Funder',
    values='HasFunder',
    aggfunc='sum',
    fill_value=0
)

# Vertical stacked bar chart
ax = df_pivot.plot(
    kind='bar',  # Changed from 'barh' to 'bar' for vertical bars
    stacked=True,
    figsize=(68, 44),
    edgecolor='none'
)

# Remove plot borders
for spine in ax.spines.values():
    spine.set_visible(False)

# Remove tick marks on both axes
ax.tick_params(axis='x', which='both', length=0, labelsize=45, pad=10)  # x-axis (countries)
ax.tick_params(axis='y', which='both', length=0, labelsize=45, pad=10)  # y-axis (funders)

# Place legend below plot and remove border
ax.legend(
    title='Funder Type',
    title_fontsize=50,      # legend title
    fontsize=50,            # legend labels
    loc='upper center',
    bbox_to_anchor=(0.5, -0.15),
    ncol=len(df_pivot.columns),
    frameon=False
)

# Set y-axis ticks at interval of 1
max_count = df_pivot.sum(axis=1).max()  # maximum total funders in a country
ax.set_yticks(np.arange(0, max_count + 1, 1))  # ticks every 1

# Add light horizontal grid lines
ax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5, alpha=1)  # horizontal lines only
ax.xaxis.grid(False)  # remove vertical grid lines if any

plt.title('MPDSR Funders', fontsize=80, weight="bold", pad=40)
plt.xlabel('Country', fontsize=65, weight="bold")
plt.ylabel('Number of Funders', fontsize=65, weight="bold")
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Assuming df_long exists, create the pivot table
df_pivot = df_long.pivot_table(
    index='country',
    columns='Funder',
    values='HasFunder',
    aggfunc='sum',
    fill_value=0
)

# Horizontal stacked bar chart
ax = df_pivot.plot(
    kind='barh',
    stacked=True,
    figsize=(68, 44),
    edgecolor='none'
)

# Remove plot borders
for spine in ax.spines.values():
    spine.set_visible(False)

# Remove tick marks on both axes
ax.tick_params(axis='y', which='both', length=0, labelsize=45, pad=10)  # y-axis
ax.tick_params(axis='x', which='both', length=0, labelsize=45, pad=10)  # x-axis

# Place legend below plot in a grid-like layout (e.g., 3 columns)
ax.legend(
    title='Funder Type',
    title_fontsize=50,      # legend title
    fontsize=50,            # legend labels
    loc='upper center',
    bbox_to_anchor=(0.5, -0.1),  # Adjusted to keep legend compact
    ncol=3,                     # Set 3 columns for grid-like layout
    frameon=False,
    columnspacing=1.0,          # Reduce spacing between columns
    handletextpad=0.5,          # Reduce padding between legend items
    borderpad=0.5              # Reduce padding around legend
)

# Set x-axis ticks at interval of 1
max_count = df_pivot.sum(axis=1).max()  # maximum total funders in a country
ax.set_xticks(np.arange(0, max_count + 1, 1))  # ticks every 1

# Add light vertical grid lines
ax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5, alpha=1)  # vertical lines only
ax.yaxis.grid(False)  # remove horizontal grid lines if any

plt.title('MPDSR Funders', fontsize=80, weight="bold", pad=40)
plt.xlabel('Number of Funders', fontsize=65, weight="bold")
plt.ylabel('Country', fontsize=65, weight="bold")
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Assuming df_long exists, create the pivot table
df_pivot = df_long.pivot_table(
    index='country',
    columns='Funder',
    values='HasFunder',
    aggfunc='sum',
    fill_value=0
)

# Horizontal stacked bar chart
ax = df_pivot.plot(
    kind='barh',
    stacked=True,
    figsize=(68, 44),
    edgecolor='none'
)

# Remove plot borders
for spine in ax.spines.values():
    spine.set_visible(False)

# Remove tick marks on both axes
ax.tick_params(axis='y', which='both', length=0, labelsize=45, pad=10)  # y-axis
ax.tick_params(axis='x', which='both', length=0, labelsize=45, pad=10)  # x-axis

# Place legend below plot in a 3-column grid with square icons
ax.legend(
    title='Funder Type',
    title_fontsize=50,      # legend title
    fontsize=50,            # legend labels
    loc='upper center',
    bbox_to_anchor=(0.5, -0.1),  # Adjusted to keep legend compact
    ncol=3,                     # 3 columns for grid-like layout
    frameon=False,
    columnspacing=1.0,          # Reduce spacing between columns
    handletextpad=0.5,          # Reduce padding between legend items
    borderpad=0.5,              # Reduce padding around legend
    handlelength=2,             # Equal length for square icons
    handleheight=2             # Equal height for square icons
)

# Set x-axis ticks at interval of 1
max_count = df_pivot.sum(axis=1).max()  # maximum total funders in a country
ax.set_xticks(np.arange(0, max_count + 1, 1))  # ticks every 1

# Add light vertical grid lines
ax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5, alpha=1)  # vertical lines only
ax.yaxis.grid(False)  # remove horizontal grid lines if any

plt.title('MPDSR Funders', fontsize=80, weight="bold", pad=40)
plt.xlabel('Number of Funders', fontsize=65, weight="bold")
plt.ylabel('Country', fontsize=65, weight="bold")
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import FancyBboxPatch

# Assuming df_long exists, create the pivot table
df_pivot = df_long.pivot_table(
    index='country',
    columns='Funder',
    values='HasFunder',
    aggfunc='sum',
    fill_value=0
)

# Horizontal stacked bar chart
ax = df_pivot.plot(
    kind='barh',
    stacked=True,
    figsize=(68, 44),
    edgecolor='none'
)

# Remove plot borders
for spine in ax.spines.values():
    spine.set_visible(False)

# Remove tick marks on both axes
ax.tick_params(axis='y', which='both', length=0, labelsize=45, pad=10)  # y-axis
ax.tick_params(axis='x', which='both', length=0, labelsize=45, pad=10)  # x-axis

# Get the default legend handles and labels
handles, labels = ax.get_legend_handles_labels()

# Create custom legend handles with rounded square boxes
new_handles = []
for handle in handles:
    # Create a FancyBboxPatch with rounded corners
    new_handle = FancyBboxPatch(
        (0, 0),  # Position (will be adjusted by legend)
        1, 1,    # Width and height (equal for square shape)
        boxstyle="Round,pad=0.2",  # Rounded corners with padding
        facecolor=handle.get_facecolor(),  # Match original color
        edgecolor='none'  # No border
    )
    new_handles.append(new_handle)

# Place legend below plot in a 3-column grid with custom rounded square icons
ax.legend(
    new_handles, labels,  # Use custom handles
    title='Funder Type',
    title_fontsize=50,      # legend title
    fontsize=50,            # legend labels
    loc='upper center',
    bbox_to_anchor=(0.5, -0.1),  # Adjusted to keep legend compact
    ncol=3,                     # 3 columns for grid-like layout
    frameon=False,
    columnspacing=1.0,          # Reduce spacing between columns
    handletextpad=0.5,          # Reduce padding between legend items
    borderpad=0.5,              # Reduce padding around legend
    handlelength=2,             # Equal length for square icons
    handleheight=2             # Equal height for square icons
)

# Set x-axis ticks at interval of 1
max_count = df_pivot.sum(axis=1).max()  # maximum total funders in a country
ax.set_xticks(np.arange(0, max_count + 1, 1))  # ticks every 1

# Add light vertical grid lines
ax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5, alpha=1)  # vertical lines only
ax.yaxis.grid(False)  # remove horizontal grid lines if any

plt.title('MPDSR Funders', fontsize=80, weight="bold", pad=40)
plt.xlabel('Number of Funders', fontsize=65, weight="bold")
plt.ylabel('Country', fontsize=65, weight="bold")
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import FancyBboxPatch

# Create the pivot table with observed=False to silence FutureWarning
df_pivot = df_long.pivot_table(
    index='country',
    columns='Funder',
    values='HasFunder',
    aggfunc='sum',
    fill_value=0,
    observed=False  # Explicitly set to silence warning
)

# Horizontal stacked bar chart
ax = df_pivot.plot(
    kind='barh',
    stacked=True,
    figsize=(68, 44),
    edgecolor='none'
)

# Remove plot borders
for spine in ax.spines.values():
    spine.set_visible(False)

# Remove tick marks on both axes
ax.tick_params(axis='y', which='both', length=0, labelsize=70, pad=20)  # y-axis
ax.tick_params(axis='x', which='both', length=0, labelsize=70, pad=20)  # x-axis

# Get the default legend handles and labels
handles, labels = ax.get_legend_handles_labels()

# Create custom legend handles with rounded square boxes
new_handles = []
for handle in handles:
    # Create a FancyBboxPatch with rounded corners
    new_handle = FancyBboxPatch(
        (0, 0),  # Position (will be adjusted by legend)
        1, 1,    # Width and height (equal for square shape)
        boxstyle="Round,pad=0.2",  # Rounded corners with padding
        facecolor=handle[0].get_facecolor(),  # Get color from first bar in BarContainer
        edgecolor='none'  # No border
    )
    new_handles.append(new_handle)

# Place legend below plot in a 3-column grid with custom rounded square icons
ax.legend(
    new_handles, labels,  # Use custom handles
    title='Funder Type',
    title_fontsize=80,      # legend title
    fontsize=70,            # legend labels
    loc='upper right',
    bbox_to_anchor=(0.5, -0.1),  # Adjusted to keep legend compact
    ncol=3,                     # 3 columns for grid-like layout
    frameon=False,
    columnspacing=1.0,          # Reduce spacing between columns
    handletextpad=0.9,          # Reduce padding between legend items
    borderpad=0.9,              # Reduce padding around legend
    handlelength=2,             # Equal length for square icons
    handleheight=2             # Equal height for square icons
)

# Set x-axis ticks at interval of 1
max_count = df_pivot.sum(axis=1).max()  # maximum total funders in a country
ax.set_xticks(np.arange(0, max_count + 1, 1))  # ticks every 1

# Add light vertical grid lines
ax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5, alpha=1)  # vertical lines only
ax.yaxis.grid(False)  # remove horizontal grid lines if any

plt.title('MPDSR Funders', fontsize=90, weight="bold", pad=40)
plt.xlabel('Number of Funders', fontsize=80, weight="bold")
plt.ylabel('Country', fontsize=80, weight="bold")
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Assuming df_long exists, create the pivot table
df_pivot = df_long.pivot_table(
    index='country',
    columns='Funder',
    values='HasFunder',
    aggfunc='sum',
    fill_value=0
)

# Horizontal stacked bar chart
ax = df_pivot.plot(
    kind='barh',
    stacked=True,
    figsize=(68, 44),
    edgecolor='none'
)

# Remove plot borders
for spine in ax.spines.values():
    spine.set_visible(False)

# Remove tick marks on both axes
ax.tick_params(axis='y', which='both', length=0, labelsize=45, pad=10)  # y-axis
ax.tick_params(axis='x', which='both', length=0, labelsize=45, pad=10)  # x-axis

# Place legend below plot in a grid-like layout (e.g., 3 columns)
ax.legend(
    title='Funder Type',
    title_fontsize=50,      # legend title
    fontsize=50,            # legend labels
    loc='upper center',
    bbox_to_anchor=(0.5, -0.1),  # Adjusted to keep legend compact
    ncol=3,                     # Set 3 columns for grid-like layout
    frameon=False,
    columnspacing=1.0,          # Reduce spacing between columns
    handletextpad=0.5,          # Reduce padding between legend items
    borderpad=0.5              # Reduce padding around legend
)

# Set x-axis ticks at interval of 1
max_count = df_pivot.sum(axis=1).max()  # maximum total funders in a country
ax.set_xticks(np.arange(0, max_count + 1, 1))  # ticks every 1

# Add light vertical grid lines
ax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5, alpha=1)  # vertical lines only
ax.yaxis.grid(False)  # remove horizontal grid lines if any

plt.title('MPDSR Funders', fontsize=80, weight="bold", pad=40)
plt.xlabel('Number of Funders', fontsize=65, weight="bold")
plt.ylabel('Country', fontsize=65, weight="bold")
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Assuming df_long exists, create the pivot table
df_pivot = df_long.pivot_table(
    index='country',
    columns='Funder',
    values='HasFunder',
    aggfunc='sum',
    fill_value=0
)

# Horizontal stacked bar chart
ax = df_pivot.plot(
    kind='barh',
    stacked=True,
    figsize=(68, 44),
    edgecolor='none'
)

# Remove plot borders
for spine in ax.spines.values():
    spine.set_visible(False)

# Remove tick marks on both axes
ax.tick_params(axis='y', which='both', length=0, labelsize=45, pad=10)  # y-axis
ax.tick_params(axis='x', which='both', length=0, labelsize=45, pad=10)  # x-axis

# Place legend below plot in a grid-like layout (e.g., 3 columns)
ax.legend(
    title='Funder Type',
    title_fontsize=50,      # legend title
    fontsize=50,            # legend labels
    loc='upper center',
    bbox_to_anchor=(0.5, -0.1),  # Adjusted to keep legend compact
    ncol=3,                     # Set 3 columns for grid-like layout
    frameon=False,
    columnspacing=1.0,          # Reduce spacing between columns
    handletextpad=0.5,          # Reduce padding between legend items
    borderpad=0.5              # Reduce padding around legend
)

# Set x-axis ticks at interval of 1
max_count = df_pivot.sum(axis=1).max()  # maximum total funders in a country
ax.set_xticks(np.arange(0, max_count + 1, 1))  # ticks every 1

# Add light vertical grid lines
ax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5, alpha=1)  # vertical lines only
ax.yaxis.grid(False)  # remove horizontal grid lines if any

plt.title('MPDSR Funders', fontsize=80, weight="bold", pad=40)
plt.xlabel('Number of Funders', fontsize=65, weight="bold")
plt.ylabel('Country', fontsize=65, weight="bold")
plt.tight_layout()
plt.show()

df_fun = df[['country'] + funder_cols].copy()

df_fun.head()

df_fun[funder_cols] = df_fun[funder_cols].replace({
    "Checked": 1,
    "Unchecked": 0
}).fillna(0)

df_long



df_fun2 = df_fun.copy()



import matplotlib.pyplot as plt

df_long = df_fun2.melt(
    id_vars="country",  # Changed from "Country" to "country"
    value_vars=funder_cols,
    var_name="Funder",
    value_name="HasFunder"
)

df_long = df_long[df_long["HasFunder"] == 1]

df_long["CountryCode"] = df_long["country"].astype("category").cat.codes
df_long["FunderCode"] = df_long["Funder"].astype("category").cat.codes

plt.figure(figsize=(14, 6))
plt.scatter(
   df_long["FunderCode"], df_long["CountryCode"],
    s=200, alpha=0.6, c="skyblue", edgecolors="k"
)

# ticks and labels
country_codes = df_long["CountryCode"].unique()
country_labels = df_long["country"].astype("category").cat.categories[country_codes]

plt.yticks(
    country_codes,
    country_labels,
    rotation=360
)
plt.xticks(
    df_long["FunderCode"].unique(),
    df_long["Funder"].astype("category").cat.categories
)

plt.xlabel("Funder")
plt.ylabel("Country")
plt.title("Countries and their MPDSR Funders")
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import FancyBboxPatch

# Assuming df_long exists, create the pivot table
df_pivot = df_long.pivot_table(
    index='country',
    columns='Funder',
    values='HasFunder',
    aggfunc='sum',
    fill_value=0
)

# Horizontal stacked bar chart
ax = df_pivot.plot(
    kind='barh',
    stacked=True,
    figsize=(68, 44),
    edgecolor='none'
)

# Remove plot borders
for spine in ax.spines.values():
    spine.set_visible(False)

# Remove tick marks on both axes
ax.tick_params(axis='y', which='both', length=0, labelsize=45, pad=10)  # y-axis
ax.tick_params(axis='x', which='both', length=0, labelsize=45, pad=10)  # x-axis

# Get the default legend handles and labels
handles, labels = ax.get_legend_handles_labels()

# Create custom legend handles with rounded square boxes
new_handles = []
for handle in handles:
    # Create a FancyBboxPatch with rounded corners
    new_handle = FancyBboxPatch(
        (0, 0),  # Position (will be adjusted by legend)
        1, 1,    # Width and height (equal for square shape)
        boxstyle="Round,pad=0.2",  # Rounded corners with padding
        facecolor=handle.get_facecolor(),  # Match original color
        edgecolor='none'  # No border
    )
    new_handles.append(new_handle)

# Place legend below plot in a 3-column grid with custom rounded square icons
ax.legend(
    new_handles, labels,  # Use custom handles
    title='Funder Type',
    title_fontsize=50,      # legend title
    fontsize=50,            # legend labels
    loc='upper center',
    bbox_to_anchor=(0.5, -0.1),  # Adjusted to keep legend compact
    ncol=3,                     # 3 columns for grid-like layout
    frameon=False,
    columnspacing=1.0,          # Reduce spacing between columns
    handletextpad=0.5,          # Reduce padding between legend items
    borderpad=0.5,              # Reduce padding around legend
    handlelength=2,             # Equal length for square icons
    handleheight=2             # Equal height for square icons
)

# Set x-axis ticks at interval of 1
max_count = df_pivot.sum(axis=1).max()  # maximum total funders in a country
ax.set_xticks(np.arange(0, max_count + 1, 1))  # ticks every 1

# Add light vertical grid lines
ax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5, alpha=1)  # vertical lines only
ax.yaxis.grid(False)  # remove horizontal grid lines if any

plt.title('MPDSR Funders', fontsize=80, weight="bold", pad=40)
plt.xlabel('Number of Funders', fontsize=65, weight="bold")
plt.ylabel('Country', fontsize=65, weight="bold")
plt.tight_layout()
plt.show()



uploaded = files.upload()

pink = pd.read_csv("Book1 with my thesis.xlsx")

pink



pink2 = pink.copy()

import pandas as pd
import plotly.express as px

# Reshape to long format
pink_long = pink2.melt(id_vars=["Study ID"], var_name="Component", value_name="Present")

# Keep only "yes"
pink_yes = pink_long[pink_long["Present"].str.lower() == "yes"]

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(24, 12))

sns.scatterplot(
    data=pink_yes,
    x="Study ID",
    y="Component",
    hue="Component",
    palette="coolwarm",   # blue-purple palette
    s=600,                # slightly smaller, reduces overlap
    legend=False,
    edgecolor="none",
    alpha=0.85            # semi-transparent bubbles
)

# Styling
plt.xticks(rotation=90, ha="right", fontsize=18)
plt.yticks(fontsize=18)
plt.xlabel("Study ID", fontsize=24, weight="bold")
plt.ylabel("Care Coordination Activity", fontsize=24, weight="bold")
plt.title("Care Coordination Components by Study", fontsize=30, weight="bold", pad=40)
sns.despine(left=True, bottom=True)
plt.grid(False)
plt.tick_params(bottom=False, left=False)
plt.tight_layout()

# Save high-resolution image
plt.savefig("bubble_plot_hd.png", dpi=600, bbox_inches="tight")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 24))

sns.scatterplot(
    data=pink_yes,
    x="Component",
    y="Study ID",
    hue="Component",
    palette="coolwarm",   # blue-purple palette
    s=600,                # slightly smaller, reduces overlap
    legend=False,
    edgecolor="none",
    alpha=0.85            # semi-transparent bubbles
)

# Styling
plt.xticks(rotation=90, ha="right", fontsize=18)
plt.yticks(fontsize=18)
plt.xlabel("Study ID", fontsize=24, weight="bold")
plt.ylabel("Care Coordination Activity", fontsize=24, weight="bold")
plt.title("Care Coordination Components by Study", fontsize=30, weight="bold", pad=40)
sns.despine(left=True, bottom=True)
plt.grid(False)
plt.tick_params(bottom=False, left=False)
plt.tight_layout()

# Save high-resolution image
plt.savefig("bubble_plot_hd.png", dpi=600, bbox_inches="tight")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import textwrap

# Wrap component names (x-axis) to 15 characters per line
wrapped_components = [textwrap.fill(label, 15) for label in pink_yes["Component"].unique()]
# Custom color palette
custom_palette = [
    "#A8FBD3",  # light teal
    "#4FB7B3",  # teal
    "#637AB9",  # periwinkle
    "#31326F",  # deep indigo
    "#9EC1CF",  # soft blue
    "#5A5B9F",  # muted violet
    "#7D4E8B",  # purple
    "#B1A7D3",  # lavender
    "#3B7A91",  # medium blue
    "#2C2E5F"   # dark navy
]


plt.figure(figsize=(24, 12))

sns.scatterplot(
    data=pink_yes,
    x="Component",   # swapped
    y="Study ID",    # swapped
    hue="Component",
    palette=custom_palette,
    s=600,
    legend=False,
    edgecolor="none",
    alpha=0.85
)

# Apply wrapped labels to x-axis
plt.xticks(ticks=range(len(wrapped_components)), labels=wrapped_components, rotation=0, ha="center", fontsize=18)
plt.yticks(fontsize=18)
plt.xlabel("Actvities", fontsize=24, weight="bold")
plt.ylabel(" ", fontsize=24, weight="bold")
plt.title("Care Coordination Activities by Study", fontsize=30, weight="bold", pad=40)
sns.despine(left=True, bottom=True)
plt.grid(False)
plt.tick_params(bottom=False, left=False)
plt.tight_layout()

plt.savefig("bubble_plot_components_x.png", dpi=600, bbox_inches="tight")
plt.show()

import pandas as pd
import random

# List of 18 East African countries
countries = [
    "Kenya", "Uganda", "Tanzania", "Rwanda", "Burundi",
    "South Sudan", "Ethiopia", "Eritrea", "Djibouti", "Somalia",
    "Comoros", "Seychelles", "Mauritius", "Madagascar", "Sudan",
    "DR Congo", "Mozambique", "Malawi"
]

# Possible values
policy_status = ["Yes", "No"]

# Create random dataset
yulu = pd.DataFrame({
    "Country": countries,
    "2019": [random.choice(policy_status) for _ in countries],
    "2020": [random.choice(policy_status) for _ in countries],
    "2024": [random.choice(policy_status) for _ in countries],
})

print(yulu)

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Download Natural Earth shapefile (only first time)
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Filter to East African countries in yulu
east_africa = world[world["NAME"].isin(yulu["Country"])]

# Merge with yulu data (example: 2024)
map_data = east_africa.merge(yulu[["Country", "2024"]],
                             left_on="NAME", right_on="Country")

# Define color mapping
color_map = {"Yes": "royalblue", "No": "lightgrey"}

# Plot
fig, ax = plt.subplots(figsize=(10, 10))
map_data.plot(
    color=map_data["2024"].map(color_map),
    edgecolor="black", linewidth=0.5, ax=ax
)

ax.set_title("Policy Status in East Africa (2024)", fontsize=16, pad=15)
ax.axis("off")

# Add custom legend
legend_handles = [
    mpatches.Patch(color="royalblue", label="Yes (Has Policy)"),
    mpatches.Patch(color="lightgrey", label="No (No Policy)")
]
ax.legend(handles=legend_handles, loc="lower left")

plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Load Natural Earth countries shapefile
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only Africa
africa = world[world["CONTINENT"] == "Africa"]

# Years to plot
years = ["2019", "2020", "2024"]

# Function for colors
def get_color(val):
    if val == "Yes":
        return "#E74C3C"   # UNFPA orange-red
    elif val == "No":
        return "#F1C40F"   # Yellow
    else:
        return "#E0E0E0"   # Light gray

# Create subplots
fig, axes = plt.subplots(1, 3, figsize=(24, 10))

for i, year in enumerate(years):
    # Merge with yulu data for that year
    map_data = africa.merge(yulu[["Country", year]],
                            left_on="NAME", right_on="Country",
                            how="left")

    # Assign colors
    map_data["color"] = map_data[year].apply(get_color)

    # Plot each map
    map_data.plot(
        color=map_data["color"],
        edgecolor="white",
        linewidth=0.6,
        ax=axes[i]
    )

    axes[i].set_title(f"Policy Status in Africa ({year})", fontsize=16, pad=15)
    axes[i].axis("off")

# Custom legend (shared)
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Has Policy)"),
    mpatches.Patch(color="#F1C40F", label="No (No Policy)"),
    mpatches.Patch(color="#E0E0E0", label="Not in Dataset")
]
fig.legend(handles=legend_handles, loc="lower center", ncol=3, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.05, 1, 1])
plt.show()

# Load Natural Earth countries shapefile
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only Africa
africa = world[world["CONTINENT"] == "Africa"]

# Years to plot
years = ["2019", "2020", "2024"]

# Function for colors
def get_color(val):
    if val == "Yes":
        return "#E74C3C"   # UNFPA orange-red
    elif val == "No":
        return "#F1C40F"   # Yellow
    else:
        return "#E0E0E0"   # Light gray

# Create subplots
fig, axes = plt.subplots(1, 3, figsize=(24, 10))

for i, year in enumerate(years):
    # Merge with yulu data for that year
    map_data = africa.merge(yulu[["Country", year]],
                            left_on="NAME", right_on="Country",
                            how="left")

    # Assign colors
    map_data["color"] = map_data[year].apply(get_color)

    # Plot each map with thicker boundaries
    map_data.plot(
        color=map_data["color"],
        edgecolor="white",
        linewidth=2,   # thicker boundaries
        ax=axes[i]
    )

    axes[i].set_title(f"Policy Status in Africa ({year})", fontsize=16, pad=15)
    axes[i].axis("off")

# Custom legend (shared)
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Has Policy)"),
    mpatches.Patch(color="#F1C40F", label="No (No Policy)"),
    mpatches.Patch(color="#E0E0E0", label="Not in Dataset")
]
fig.legend(handles=legend_handles, loc="lower center", ncol=3, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.05, 1, 1])
plt.show()

# Load Natural Earth countries shapefile
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only Africa
africa = world[world["CONTINENT"] == "Africa"]

# Years to plot
years = ["2019", "2020", "2024"]

# Function for colors
def get_color(val):
    if val == "Yes":
        return "#E74C3C"   # UNFPA orange-red
    elif val == "No":
        return "#F1C40F"   # Yellow
    else:
        return "#E0E0E0"   # Light gray

# Create subplots
fig, axes = plt.subplots(1, 3, figsize=(24, 10))

for i, year in enumerate(years):
    # Merge with yulu data for that year
    map_data = africa.merge(yulu[["Country", year]],
                            left_on="NAME", right_on="Country",
                            how="left")

    # Assign colors
    map_data["color"] = map_data[year].apply(get_color)

    # Plot each map with thicker boundaries
    map_data.plot(
        color=map_data["color"],
        edgecolor="white",
        linewidth=1.2,
        ax=axes[i]
    )

    axes[i].axis("off")

    # Add black strip + white text
    axes[i].set_title("", pad=0)  # remove default
    axes[i].add_patch(
        mpatches.Rectangle(
            (0, 1.02), 1, 0.06,
            transform=axes[i].transAxes,
            color="black",
            clip_on=False,
            zorder=2
        )
    )
    axes[i].text(
        0.5, 1.05, f"Year {year}",
        transform=axes[i].transAxes,
        ha="center", va="center",
        fontsize=14, color="white", weight="bold"
    )

# Custom legend (shared)
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Has Policy)"),
    mpatches.Patch(color="#F1C40F", label="No (No Policy)"),
    mpatches.Patch(color="#E0E0E0", label="Not in Dataset")
]
fig.legend(handles=legend_handles, loc="lower center", ncol=3, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.05, 1, 1])
plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import numpy as np

# Load Natural Earth countries shapefile
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only Africa
africa = world[world["CONTINENT"] == "Africa"]

# Years to plot
years = ["2019", "2020", "2024"]

# Function for colors
def get_color(val):
    if val == "Yes":
        return "#E74C3C"   # UNFPA orange-red
    elif val == "No":
        return "#F1C40F"   # Yellow
    else:
        return "#E0E0E0"   # Light gray

# Create subplots
fig, axes = plt.subplots(2, 3, figsize=(24, 14), gridspec_kw={'height_ratios': [4, 1]})

for i, year in enumerate(years):
    # Merge with yulu data for that year
    map_data = africa.merge(yulu[["Country", year]],
                            left_on="NAME", right_on="Country",
                            how="left")

    # Assign colors
    map_data["color"] = map_data[year].apply(get_color)

    # --- Top row: map ---
    map_data.plot(
        color=map_data["color"],
        edgecolor="white",
        linewidth=1.2,
        ax=axes[0, i]
    )
    axes[0, i].axis("off")

    # Black strip with white text
    axes[0, i].add_patch(
        mpatches.Rectangle(
            (0, 1.02), 1, 0.06,
            transform=axes[0, i].transAxes,
            color="black",
            clip_on=False,
            zorder=2
        )
    )
    axes[0, i].text(
        0.5, 1.05, f"Year {year}",
        transform=axes[0, i].transAxes,
        ha="center", va="center",
        fontsize=14, color="white", weight="bold"
    )

    # --- Bottom row: stacked bar ---
    counts = map_data[year].value_counts(dropna=False).to_dict()
    yes = counts.get("Yes", 0)
    no = counts.get("No", 0)
    missing = counts.get(np.nan, 0)  # not in dataset

    total = yes + no + missing
    yes_pct = yes / total
    no_pct = no / total
    missing_pct = missing / total

    axes[1, i].barh(0, yes_pct, color="#E74C3C")
    axes[1, i].barh(0, no_pct, left=yes_pct, color="#F1C40F")
    axes[1, i].barh(0, missing_pct, left=yes_pct + no_pct, color="#E0E0E0")

    axes[1, i].set_xlim(0, 1)
    axes[1, i].set_ylim(-0.5, 0.5)
    axes[1, i].axis("off")

# Shared legend
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Has Policy)"),
    mpatches.Patch(color="#F1C40F", label="No (No Policy)"),
    mpatches.Patch(color="#E0E0E0", label="Not in Dataset")
]
fig.legend(handles=legend_handles, loc="lower center", ncol=3, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Load Natural Earth shapefile
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only Africa
africa = world[world["CONTINENT"] == "Africa"]

# Years to plot
years = ["2019", "2020", "2024"]

# Function for colors
def get_color(val):
    if val == "Yes":
        return "#E74C3C"   # UNFPA orange-red
    elif val == "No":
        return "#F1C40F"   # Yellow
    else:
        return "#E0E0E0"   # Light gray

# Create subplots (maps + bars)
fig, axes = plt.subplots(2, 3, figsize=(24, 12), gridspec_kw={'height_ratios': [4, 0.4]})

for i, year in enumerate(years):
    # Merge with yulu data for that year
    map_data = africa.merge(yulu[["Country", year]],
                            left_on="NAME", right_on="Country",
                            how="left")

    # Assign colors
    map_data["color"] = map_data[year].apply(get_color)

    # --- Top row: map ---
    map_data.plot(
        color=map_data["color"],
        edgecolor="white",
        linewidth=1.2,
        ax=axes[0, i]
    )
    axes[0, i].axis("off")

    # Black strip with white text
    axes[0, i].add_patch(
        mpatches.Rectangle(
            (0, 1.02), 1, 0.06,
            transform=axes[0, i].transAxes,
            color="black",
            clip_on=False,
            zorder=2
        )
    )
    axes[0, i].text(
        0.5, 1.05, f"Year {year}",
        transform=axes[0, i].transAxes,
        ha="center", va="center",
        fontsize=14, color="white", weight="bold"
    )

    # --- Bottom row: stacked percentage bar ---
    counts = map_data[year].value_counts().to_dict()
    yes = counts.get("Yes", 0)
    no = counts.get("No", 0)
    total = yes + no if (yes + no) > 0 else 1

    yes_pct = yes / total
    no_pct = no / total

    # Draw thin bar
    axes[1, i].barh(0, yes_pct, color="#E74C3C", height=0.2)
    axes[1, i].barh(0, no_pct, left=yes_pct, color="#F1C40F", height=0.2)

    # Add percentage labels
    if yes_pct > 0.05:  # only label if big enough
        axes[1, i].text(yes_pct/2, 0, f"{yes_pct*100:.0f}%",
                        ha="center", va="center", color="white", fontsize=10, weight="bold")
    if no_pct > 0.05:
        axes[1, i].text(yes_pct + no_pct/2, 0, f"{no_pct*100:.0f}%",
                        ha="center", va="center", color="black", fontsize=10, weight="bold")

    axes[1, i].set_xlim(0, 1)
    axes[1, i].set_ylim(-0.5, 0.5)
    axes[1, i].axis("off")

# Shared legend
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Has Policy)"),
    mpatches.Patch(color="#F1C40F", label="No (No Policy)")
]
fig.legend(handles=legend_handles, loc="lower center", ncol=2, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()









# Step 1: Import the files module from google.colab
from google.colab import files
import pandas as pd

# Step 2: Upload the CSV file (a file chooser will pop up)
uploaded = files.upload()

ind = pd.read_csv(Book2ind.xlsx)

ind.head()

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

sns.set(style="whitegrid")

# 1. Identify strictly Yes/No columns
indicator_cols = []
for col in ind.columns.drop('Country'):
    unique_vals = ind[col].dropna().unique()
    if set(unique_vals).issubset({'Yes','No'}):
        indicator_cols.append(col)

# 2. Convert Yes/No to 0/1 only for these columns
ind_numeric = ind.copy()
ind_numeric[indicator_cols] = ind_numeric[indicator_cols].replace({'Yes':1, 'No':0})

# 3. Heatmap for numeric Yes/No columns
plt.figure(figsize=(14,10))
sns.heatmap(ind_numeric.set_index('Country')[indicator_cols], annot=True, cmap='YlGnBu', cbar=True)
plt.title('Policy Indicator Status Across Countries (0=No, 1=Yes)')
plt.xlabel('Policy Columns')
plt.ylabel('Countries')
plt.show()

# 4. Handle Progress/Status columns separately (categorical)
progress_cols = [c for c in ind.columns if c not in indicator_cols + ['Country']]

for col in progress_cols:
    plt.figure(figsize=(10,5))
    sns.countplot(data=ind, x=col, order=ind[col].value_counts().index, palette='pastel')
    plt.title(f'Status Distribution: {col}')
    plt.ylabel('Number of Countries')
    plt.xticks(rotation=45)
    plt.show()

# ----------------------------
# Install required packages
# ----------------------------
!pip install plotly geopandas

# ----------------------------
# Imports
# ----------------------------
import pandas as pd
import geopandas as gpd
import plotly.express as px

# ----------------------------
# Step 1: Prepare maternal policy data
# ----------------------------
# Select maternal policy columns (Yes/No indicators)
mat_cols = [c for c in ind.columns if 'mat' in c.lower() and 'exists' in c.lower()]

# Convert Yes/No to 1/0
ind_map = ind.copy()
ind_map[mat_cols] = ind_map[mat_cols].replace({'Yes':1, 'No':0})

# Melt dataframe to long format
ind_long = ind_map.melt(
    id_vars='Country',
    value_vars=mat_cols,
    var_name='Policy_Year',
    value_name='Exists'
)

# Clean up column names for display
ind_long['Policy_Year'] = ind_long['Policy_Year'].str.replace('National policy on notification exists ', '')

# ----------------------------
# Step 2: Optional - check and fix country names
# ----------------------------
# Load world geometry
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

# Example: if your dataset uses 'USA' instead of 'United States', rename it
# ind_long['Country'] = ind_long['Country'].replace({'USA':'United States'})

# ----------------------------
# Step 3: Create interactive choropleth map
# ----------------------------
fig = px.choropleth(
    ind_long,
    locations='Country',
    locationmode='country names',
    color='Exists',
    hover_name='Country',
    facet_col='Policy_Year',      # one map per year
    color_continuous_scale=['red','green'],  # red = No, green = Yes
    labels={'Exists':'Policy Exists'}
)

fig.update_layout(
    title_text='Maternal Policy Coverage by Country and Year',
    coloraxis_showscale=False
)

fig.show()

# ----------------------------
# Install required packages
# ----------------------------
!pip install plotly geopandas

# ----------------------------
# Imports
# ----------------------------
import pandas as pd
import geopandas as gpd
import plotly.express as px
import urllib.request
import zipfile
import os

# ----------------------------
# Step 1: Download Natural Earth shapefile (countries)
# ----------------------------
url = "https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/cultural/ne_110m_admin_0_countries.zip"
zip_path = "/tmp/ne_countries.zip"

urllib.request.urlretrieve(url, zip_path)

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall("/tmp/ne_countries")

shapefile_path = "/tmp/ne_countries/ne_110m_admin_0_countries.shp"

# Load shapefile
world = gpd.read_file(shapefile_path)

# ----------------------------
# Step 2: Prepare maternal policy data
# ----------------------------
# Select maternal policy columns (Yes/No indicators)
mat_cols = [c for c in ind.columns if 'mat' in c.lower() and 'exists' in c.lower()]

# Convert Yes/No to 1/0
ind_map = ind.copy()
ind_map[mat_cols] = ind_map[mat_cols].replace({'Yes':1,'No':0})

# Melt dataframe to long format
ind_long = ind_map.melt(
    id_vars='Country',
    value_vars=mat_cols,
    var_name='Policy_Year',
    value_name='Exists'
)

# Clean up column names for display
ind_long['Policy_Year'] = ind_long['Policy_Year'].str.replace('National policy on notification exists ', '')

# ----------------------------
# Step 3: Optional - fix country names to match shapefile
# ----------------------------
# Example: if your dataset uses 'USA' instead of 'United States', rename it
# ind_long['Country'] = ind_long['Country'].replace({'USA':'United States of America'})

# ----------------------------
# Step 4: Create interactive choropleth map
# ----------------------------
fig = px.choropleth(
    ind_long,
    locations='Country',
    locationmode='country names',
    color='Exists',
    hover_name='Country',
    facet_col='Policy_Year',      # one map per year
    color_continuous_scale=['red','green'],  # red = No, green = Yes
    labels={'Exists':'Policy Exists'}
)

fig.update_layout(
    title_text='Maternal Policy Coverage by Country and Year',
    coloraxis_showscale=False
)

fig.show()



# ----------------------------
# Imports
# ----------------------------
import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# ----------------------------
# Load Natural Earth shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only Africa
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Prepare maternal policy data
# ----------------------------
# Automatically detect maternal policy columns (Yes/No indicators)
mat_cols = [c for c in ind.columns if 'mat' in c.lower() and 'exists' in c.lower()]

# Ensure values are strings
ind[mat_cols] = ind[mat_cols].astype(str)

# Years to plot (extract from column names)
years = [c.split()[-2] for c in mat_cols]  # assumes "exists YEAR mat"

# ----------------------------
# Color function
# ----------------------------
def get_color(val):
    if val.lower() == "yes":
        return "#E74C3C"   # Red for Yes
    elif val.lower() == "no":
        return "#F1C40F"   # Yellow for No
    else:
        return "#E0E0E0"   # Light gray for missing

# ----------------------------
# Create subplots (maps + bars)
# ----------------------------
fig, axes = plt.subplots(2, len(years), figsize=(6*len(years), 12), gridspec_kw={'height_ratios': [4, 0.4]})

for i, col in enumerate(mat_cols):
    year = years[i]

    # Merge with Africa shapefile
    map_data = africa.merge(ind[['Country', col]],
                            left_on='NAME', right_on='Country', how='left')

    # Assign colors
    map_data['color'] = map_data[col].apply(get_color)

    # --- Top row: map ---
    map_data.plot(
        color=map_data['color'],
        edgecolor='white',
        linewidth=1.2,
        ax=axes[0, i]
    )
    axes[0, i].axis('off')

    # Black strip with year text
    axes[0, i].add_patch(
        mpatches.Rectangle((0, 1.02), 1, 0.06, transform=axes[0, i].transAxes, color='black', clip_on=False)
    )
    axes[0, i].text(
        0.5, 1.05, f"Year {year}", transform=axes[0, i].transAxes,
        ha='center', va='center', fontsize=14, color='white', weight='bold'
    )

    # --- Bottom row: stacked percentage bar ---
    counts = map_data[col].value_counts().to_dict()
    yes = counts.get("Yes", 0)
    no = counts.get("No", 0)
    total = yes + no if (yes + no) > 0 else 1

    yes_pct = yes / total
    no_pct = no / total

    axes[1, i].barh(0, yes_pct, color="#E74C3C", height=0.2)
    axes[1, i].barh(0, no_pct, left=yes_pct, color="#F1C40F", height=0.2)

    # Add percentage labels if big enough
    if yes_pct > 0.05:
        axes[1, i].text(yes_pct/2, 0, f"{yes_pct*100:.0f}%", ha='center', va='center', color='white', fontsize=10, weight='bold')
    if no_pct > 0.05:
        axes[1, i].text(yes_pct + no_pct/2, 0, f"{no_pct*100:.0f}%", ha='center', va='center', color='black', fontsize=10, weight='bold')

    axes[1, i].set_xlim(0, 1)
    axes[1, i].set_ylim(-0.5, 0.5)
    axes[1, i].axis('off')

# ----------------------------
# Shared legend
# ----------------------------
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Has Policy)"),
    mpatches.Patch(color="#F1C40F", label="No (No Policy)")
]
fig.legend(handles=legend_handles, loc='lower center', ncol=2, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()



def get_color(val):
    if isinstance(val, str):
        if val.lower() == "yes":
            return "#E74C3C"   # Red for Yes
        elif val.lower() == "no":
            return "#F1C40F"   # Yellow for No
        else:
            return "#E0E0E0"   # Light gray for other text
    else:
        return "#E0E0E0"       # Light gray for NaN or numbers

# ----------------------------
# Imports
# ----------------------------
import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# ----------------------------
# Load Natural Earth shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only the countries of interest
countries_of_interest = [
    "Botswana", "Comoros", "Democratic Republic of the Congo", "Ethiopia",
    "Kenya", "Lesotho", "Madagascar", "Mozambique", "Namibia", "Rwanda",
    "South Sudan", "Tanzania", "Zanzibar", "Uganda", "Zambia", "Zimbabwe"
]

africa = world[world["NAME"].isin(countries_of_interest)]

# ----------------------------
# Prepare maternal policy data
# ----------------------------
# Columns for maternal policy existence
mat_cols = ["National policy on notification exists 2021 mat",
            "National policy on notification exists 2024 mat"]

# Extract only relevant columns
mat_data = ind[["Country"] + mat_cols]

# Merge with geometry
map_data = africa.merge(mat_data, left_on="NAME", right_on="Country", how="left")

# ----------------------------
# Color function
# ----------------------------
def get_color_2021(val):
    if str(val).lower() == "yes":
        return "#E74C3C"   # Red
    elif str(val).lower() == "no":
        return "#F1C40F"   # Yellow
    else:
        return "#E0E0E0"   # Gray for missing

def get_color_2024(val):
    if str(val).lower() == "yes":
        return "#C0392B"   # Darker red
    elif str(val).lower() == "no":
        return "#F39C12"   # Darker yellow
    else:
        return "#E0E0E0"   # Gray for missing

# Assign colors
map_data["color_2021"] = map_data["National policy on notification exists 2021 mat"].apply(get_color_2021)
map_data["color_2024"] = map_data["National policy on notification exists 2024 mat"].apply(get_color_2024)

# ----------------------------
# Plot side-by-side maps
# ----------------------------
fig, axes = plt.subplots(1, 2, figsize=(16, 10))

# 2021 map
map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=1.2, ax=axes[0])
axes[0].axis("off")
axes[0].set_title("Maternal Policy Existence 2021", fontsize=14, weight="bold")

# 2024 map
map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=1.2, ax=axes[1])
axes[1].axis("off")
axes[1].set_title("Maternal Policy Existence 2024", fontsize=14, weight="bold")

# Shared legend
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="2021: Yes"),
    mpatches.Patch(color="#F1C40F", label="2021: No"),
    mpatches.Patch(color="#C0392B", label="2024: Yes"),
    mpatches.Patch(color="#F39C12", label="2024: No"),
    mpatches.Patch(color="#E0E0E0", label="Missing")
]
fig.legend(handles=legend_handles, loc="lower center", ncol=5, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()

ind.head()

# ----------------------------
# Imports
# ----------------------------
import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# ----------------------------
# Load Natural Earth shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only Africa
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Prepare maternal policy data
# ----------------------------
# Columns for maternal policy existence
mat_cols = ["National policy on notification exists 2021 mat",
            "National policy on notification exists 2024 mat"]

mat_data = ind[["Country"] + mat_cols]

# Merge with Africa geometry
map_data = africa.merge(mat_data, left_on="NAME", right_on="Country", how="left")

# ----------------------------
# Assign colors based on 2024 policy existence
# ----------------------------
def get_color(val):
    if str(val).lower() == "yes":
        return "#2ECC71"  # Green = policy exists
    elif str(val).lower() == "no":
        return "#E74C3C"  # Red = policy does not exist
    else:
        return "#E0E0E0"  # Light gray = missing data

map_data["color"] = map_data["National policy on notification exists 2024 mat"].apply(get_color)

# ----------------------------
# Determine progress (2021 → 2024)
# ----------------------------
# True if policy was "No" in 2021 and "Yes" in 2024
def made_progress(row):
    val_2021 = str(row["National policy on notification exists 2021 mat"]).lower()
    val_2024 = str(row["National policy on notification exists 2024 mat"]).lower()
    if val_2021 == "no" and val_2024 == "yes":
        return True
    else:
        return False

map_data["progress"] = map_data.apply(made_progress, axis=1)

# ----------------------------
# Plot the map
# ----------------------------
fig, ax = plt.subplots(1, 1, figsize=(14, 12))

# Plot all countries with color based on 2024 policy
map_data.plot(color=map_data["color"], edgecolor="white", linewidth=0.8, ax=ax)

# Overlay progress indicators (dots)
progress_countries = map_data[map_data["progress"] == True]
progress_countries.centroid.plot(ax=ax, color="blue", markersize=80, marker="*", label="Progress 2021→2024")

# Remove axes
ax.axis("off")
ax.set_title("Maternal Policy Notification Across Africa (2021→2024)", fontsize=16, weight="bold")

# Legend
legend_handles = [
    mpatches.Patch(color="#2ECC71", label="Policy exists in 2024"),
    mpatches.Patch(color="#E74C3C", label="Policy missing in 2024"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
               markerfacecolor="blue", markersize=15)
]
ax.legend(handles=legend_handles, loc="lower left", fontsize=12, frameon=False)

plt.show()

# ----------------------------
# Imports
# ----------------------------
import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# ----------------------------
# Load Natural Earth shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only Africa
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Prepare maternal policy data
# ----------------------------
mat_cols = ["National policy on notification exists 2021 mat",
            "National policy on notification exists 2024 mat"]

mat_data = ind[["Country"] + mat_cols]

# Merge with Africa geometry
map_data = africa.merge(mat_data, left_on="NAME", right_on="Country", how="left")

# ----------------------------
# Assign colors
# ----------------------------
def get_color(val):
    if str(val).lower() == "yes":
        return "#2ECC71"  # Green = policy exists
    elif str(val).lower() == "no":
        return "#E74C3C"  # Red = missing
    else:
        return "#E0E0E0"  # Light gray = no data

map_data["color_2021"] = map_data["National policy on notification exists 2021 mat"].apply(get_color)
map_data["color_2024"] = map_data["National policy on notification exists 2024 mat"].apply(get_color)

# ----------------------------
# Determine progress (No in 2021 → Yes in 2024)
# ----------------------------
def made_progress(row):
    val_2021 = str(row["National policy on notification exists 2021 mat"]).lower()
    val_2024 = str(row["National policy on notification exists 2024 mat"]).lower()
    return val_2021 == "no" and val_2024 == "yes"

map_data["progress"] = map_data.apply(made_progress, axis=1)

# ----------------------------
# Plot side-by-side maps
# ----------------------------
fig, axes = plt.subplots(1, 2, figsize=(20, 12))

# 2021 map
map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
axes[0].axis("off")
axes[0].set_title("Maternal Policy Existence 2021", fontsize=16, weight="bold")

# 2024 map
map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
# Overlay progress indicators on 2024 map
progress_countries = map_data[map_data["progress"] == True]
progress_countries.centroid.plot(ax=axes[1], color="blue", markersize=80, marker="*", label="Progress 2021→2024")
axes[1].axis("off")
axes[1].set_title("Maternal Policy Existence 2024", fontsize=16, weight="bold")

# ----------------------------
# Shared legend
# ----------------------------
legend_handles = [
    mpatches.Patch(color="#2ECC71", label="Policy exists"),
    mpatches.Patch(color="#E74C3C", label="Policy missing"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
               markerfacecolor="blue", markersize=15)
]
fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only Africa
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Prepare maternal policy data
# ----------------------------
mat_cols = ["National policy on notification exists 2021 mat",
            "National policy on notification exists 2024 mat"]

map_data = africa.merge(ind[["Country"] + mat_cols], left_on="NAME", right_on="Country", how="left")

# ----------------------------
# Project to metric CRS for accurate centroids
# ----------------------------
map_data = map_data.to_crs(epsg=3857)  # Web Mercator

# ----------------------------
# Assign colors
# ----------------------------
def get_color(val):
    if str(val).lower() == "yes":
        return "#E74C3C"   # UNFPA orange
    elif str(val).lower() == "no":
        return "#F1C40F"   # Golden yellow
    else:
        return "#E0E0E0"   # Light gray

map_data["color_2021"] = map_data["National policy on notification exists 2021 mat"].apply(get_color)
map_data["color_2024"] = map_data["National policy on notification exists 2024 mat"].apply(get_color)

# ----------------------------
# Determine progress (No in 2021 → Yes in 2024)
# ----------------------------
map_data["progress"] = map_data.apply(
    lambda row: str(row["National policy on notification exists 2021 mat"]).lower() == "no" and
                str(row["National policy on notification exists 2024 mat"]).lower() == "yes",
    axis=1
)

# ----------------------------
# Plot side-by-side maps
# ----------------------------
fig, axes = plt.subplots(1, 2, figsize=(20, 12))

# 2021 map
map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
axes[0].axis("off")
axes[0].set_title("Maternal Policy Existence 2021", fontsize=16, weight="bold")

# 2024 map
map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
axes[1].axis("off")
axes[1].set_title("Maternal Policy Existence 2024", fontsize=16, weight="bold")

# Add progress indicator (small blue star) on 2024 map
progress_countries = map_data[map_data["progress"] == True]
progress_countries_centroids = progress_countries.copy()
progress_countries_centroids["geometry"] = progress_countries_centroids.centroid
progress_countries_centroids.plot(ax=axes[1], color="blue", markersize=80, marker="*", label="Progress 2021→2024")

# ----------------------------
# Shared legend
# ----------------------------
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Policy exists)"),
    mpatches.Patch(color="#F1C40F", label="No (Policy missing)"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
               markerfacecolor="blue", markersize=15)
]
fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()

ind.head()

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)

# Keep only Africa
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Prepare maternal policy data from 'ind'
# ----------------------------
mat_cols = ["National policy on notification exists 2021 mat",
            "National policy on notification exists 2024 mat"]

# Merge Africa geometry with 'ind' data
map_data = africa.merge(ind[["Country"] + mat_cols], left_on="NAME", right_on="Country", how="left")

# ----------------------------
# Project to metric CRS for centroids
# ----------------------------
map_data = map_data.to_crs(epsg=3857)

# ----------------------------
# Assign colors
# ----------------------------
def get_color(val):
    if str(val).lower() == "yes":
        return "#E74C3C"   # UNFPA orange
    elif str(val).lower() == "no":
        return "#F1C40F"   # Golden yellow
    else:
        return "#E0E0E0"   # Light gray for missing data

map_data["color_2021"] = map_data["National policy on notification exists 2021 mat"].apply(get_color)
map_data["color_2024"] = map_data["National policy on notification exists 2024 mat"].apply(get_color)

# ----------------------------
# Determine progress (No in 2021 → Yes in 2024)
# ----------------------------
map_data["progress"] = map_data.apply(
    lambda row: str(row["National policy on notification exists 2021 mat"]).lower() == "no" and
                str(row["National policy on notification exists 2024 mat"]).lower() == "yes",
    axis=1
)

# ----------------------------
# Plot side-by-side maps
# ----------------------------
fig, axes = plt.subplots(1, 2, figsize=(20, 12))

# 2021 map
map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
axes[0].axis("off")
axes[0].set_title("Maternal Policy Existence 2021", fontsize=16, weight="bold")

# 2024 map
map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
axes[1].axis("off")
axes[1].set_title("Maternal Policy Existence 2024", fontsize=16, weight="bold")

# Add progress indicators (blue star) on 2024 map
progress_countries = map_data[map_data["progress"] == True].copy()
progress_countries["geometry"] = progress_countries.centroid
progress_countries.plot(ax=axes[1], color="blue", markersize=80, marker="*", label="Progress 2021→2024")

# ----------------------------
# Shared legend
# ----------------------------
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Policy exists)"),
    mpatches.Patch(color="#F1C40F", label="No (Policy missing)"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
               markerfacecolor="blue", markersize=15)
]
fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()

# Strip whitespace and convert to lowercase
ind["National policy on notification exists 2021 mat"] = ind["National policy on notification exists 2021 mat"].astype(str).str.strip().str.lower()
ind["National policy on notification exists 2024 mat"] = ind["National policy on notification exists 2024 mat"].astype(str).str.strip().str.lower()

def get_color(val):
    if val == "Yes":
        return "#E74C3C"   # UNFPA orange
    elif val == "NaN":
        return "#F1C40F"   # Golden yellow
    else:
        return "#E0E0E0"   # Light gray for missing data

map_data["color_2021"] = map_data["National policy on notification exists 2021 mat"].apply(get_color)
map_data["color_2024"] = map_data["National policy on notification exists 2024 mat"].apply(get_color)

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import pandas as pd

# ----------------------------
# Clean the data in 'ind'
# ----------------------------
ind["National policy on notification exists 2021 mat"] = (
    ind["National policy on notification exists 2021 mat"]
    .astype(str)
    .str.strip()
    .str.lower()
)

ind["National policy on notification exists 2024 mat"] = (
    ind["National policy on notification exists 2024 mat"]
    .astype(str)
    .str.strip()
    .str.lower()
)

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Merge 'ind' with Africa geometry
# ----------------------------
mat_cols = [
    "National policy on notification exists 2021 mat",
    "National policy on notification exists 2024 mat"
]

map_data = africa.merge(ind[["Country"] + mat_cols], left_on="NAME", right_on="Country", how="left")

# ----------------------------
# Project to metric CRS for accurate centroids
# ----------------------------
map_data = map_data.to_crs(epsg=3857)

# ----------------------------
# Define color function (fixed)
# ----------------------------
def get_color(val):
    if val == "yes":
        return "#89CFF0"   # UNFPA orange
    elif val == "NaN":
        return "#F1C40F"   # Golden yellow
    else:
        return "#E0E0E0"   # Light gray

map_data["color_2021"] = map_data["National policy on notification exists 2021 mat"].apply(get_color)
map_data["color_2024"] = map_data["National policy on notification exists 2024 mat"].apply(get_color)

# ----------------------------
# Determine progress (No in 2021 → Yes in 2024)
# ----------------------------
map_data["progress"] = map_data.apply(
    lambda row: row["National policy on notification exists 2021 mat"] == "no"
                and row["National policy on notification exists 2024 mat"] == "yes",
    axis=1
)

# ----------------------------
# Plot side-by-side maps
# ----------------------------
fig, axes = plt.subplots(1, 2, figsize=(20, 12))

# 2021 map
map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
axes[0].axis("off")
axes[0].set_title("Maternal Policy Existence 2021", fontsize=16, weight="bold")

# 2024 map
map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
axes[1].axis("off")
axes[1].set_title("Maternal Policy Existence 2024", fontsize=16, weight="bold")

# Add blue star for progress countries
progress_countries = map_data[map_data["progress"] == True].copy()
progress_countries["geometry"] = progress_countries.centroid
progress_countries.plot(ax=axes[1], color="blue", markersize=80, marker="*", label="Progress 2021→2024")

# ----------------------------
# Shared legend
# ----------------------------
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Policy exists)"),
    mpatches.Patch(color="#F1C40F", label="No (Policy missing)"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
               markerfacecolor="blue", markersize=15)
]
fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()







map_data

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import pandas as pd

# ----------------------------
# Clean the data in 'ind'
# ----------------------------
ind["National policy on notification exists 2021 mat"] = (
    ind["National policy on notification exists 2021 mat"]
    .astype(str)
    .str.strip()
    .str.lower()
)
ind["National policy on notification exists 2024 mat"] = (
    ind["National policy on notification exists 2024 mat"]
    .astype(str)
    .str.strip()
    .str.lower()
)

# Replace 'nan' strings with actual NaN
ind["National policy on notification exists 2021 mat"].replace("nan", pd.NA, inplace=True)
ind["National policy on notification exists 2024 mat"].replace("nan", pd.NA, inplace=True)

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Merge 'ind' with Africa geometry
# ----------------------------
mat_cols = [
    "National policy on notification exists 2021 mat",
    "National policy on notification exists 2024 mat"
]

map_data = africa.merge(ind[["Country"] + mat_cols], left_on="NAME", right_on="Country", how="left")

# ----------------------------
# Project to metric CRS for accurate centroids
# ----------------------------
map_data = map_data.to_crs(epsg=3857)

# ----------------------------
# Define color function for Yes / NaN
# ----------------------------
def get_color(val):
    if val == "yes":
        return "#E74C3C"   # UNFPA orange
    else:
        return "#E0E0E0"   # Light gray for missing/NaN

map_data["color_2021"] = map_data["National policy on notification exists 2021 mat"].apply(get_color)
map_data["color_2024"] = map_data["National policy on notification exists 2024 mat"].apply(get_color)

# ----------------------------
# Determine progress (No policy in 2021 → Yes in 2024)
# ----------------------------
map_data["progress"] = map_data.apply(
    lambda row: pd.isna(row["National policy on notification exists 2021 mat"])
                and row["National policy on notification exists 2024 mat"] == "yes",
    axis=1
)

# ----------------------------
# Plot side-by-side maps
# ----------------------------
fig, axes = plt.subplots(1, 2, figsize=(20, 12))

# 2021 map
map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
axes[0].axis("off")
axes[0].set_title("Maternal Policy Existence 2021", fontsize=16, weight="bold")

# 2024 map
map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
axes[1].axis("off")
axes[1].set_title("Maternal Policy Existence 2024", fontsize=16, weight="bold")

# Add blue star for progress countries
progress_countries = map_data[map_data["progress"] == True].copy()
progress_countries["geometry"] = progress_countries.centroid
progress_countries.plot(ax=axes[1], color="blue", markersize=80, marker="*", label="Progress 2021→2024")

# ----------------------------
# Shared legend
# ----------------------------
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Policy exists)"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
               markerfacecolor="blue", markersize=15)
]
fig.legend(handles=legend_handles, loc="lower center", ncol=3, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()

ind

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import pandas as pd

# ----------------------------
# Clean the data in 'ind'
# ----------------------------
# Ensure values are strings and stripped
for col in ["National policy on notification exists 2021 mat",
            "National policy on notification exists 2024 mat"]:
    ind[col] = ind[col].astype(str).str.strip()

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Merge 'ind' with Africa geometry
# ----------------------------
map_data = africa.merge(
    ind[["Country",
         "National policy on notification exists 2021 mat",
         "National policy on notification exists 2024 mat"]],
    left_on="NAME",
    right_on="Country",
    how="left"
)

# ----------------------------
# Project to metric CRS for centroids
# ----------------------------
map_data = map_data.to_crs(epsg=3857)

# ----------------------------
# Define color function
# ----------------------------
def get_color(val):
    if val == "Yes":
        return "#E74C3C"  # UNFPA orange
    elif val == "No":
        return "#F1C40F"  # Golden yellow
    else:
        return "#E0E0E0"  # Light gray for missing data

map_data["color_2021"] = map_data["National policy on notification exists 2021 mat"].apply(get_color)
map_data["color_2024"] = map_data["National policy on notification exists 2024 mat"].apply(get_color)

# ----------------------------
# Determine progress (No in 2021 → Yes in 2024)
# ----------------------------
map_data["progress"] = map_data.apply(
    lambda row: row["National policy on notification exists 2021 mat"] == "No"
                and row["National policy on notification exists 2024 mat"] == "Yes",
    axis=1
)

# ----------------------------
# Plot side-by-side maps
# ----------------------------
fig, axes = plt.subplots(1, 2, figsize=(20, 12))

# 2021 map
map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
axes[0].axis("off")
axes[0].set_title("Maternal Policy Existence 2021", fontsize=16, weight="bold")

# 2024 map
map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
axes[1].axis("off")
axes[1].set_title("Maternal Policy Existence 2024", fontsize=16, weight="bold")

# Add blue star for progress countries
progress_countries = map_data[map_data["progress"] == True].copy()
progress_countries["geometry"] = progress_countries.centroid
progress_countries.plot(ax=axes[1], color="blue", markersize=80, marker="*", label="Progress 2021→2024")

# ----------------------------
# Shared legend
# ----------------------------
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Policy exists)"),
    mpatches.Patch(color="#F1C40F", label="No (Policy missing)"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
               markerfacecolor="blue", markersize=15)
]
fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()

map_data

# Map of country name corrections
name_corrections = {
    "DRC": "Democratic Republic of the Congo",
    "Zanzibar": "Tanzania"  # Natural Earth does not have Zanzibar separately
}

# Apply corrections
ind["Country"] = ind["Country"].replace(name_corrections)

ind

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import pandas as pd

# ----------------------------
# Clean the data in 'ind'
# ----------------------------
for col in ["National policy on notification exists 2021 mat",
            "National policy on notification exists 2024 mat"]:
    ind[col] = ind[col].astype(str).str.strip()

#

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Merge 'ind' with Africa geometry
# ----------------------------
map_data = africa.merge(
    ind[["Country",
         "National policy on notification exists 2021 mat",
         "National policy on notification exists 2024 mat"]],
    left_on="NAME",
    right_on="Country",
    how="left"
)

# ----------------------------
# Project to metric CRS for accurate centroids
# ----------------------------
map_data = map_data.to_crs(epsg=3857)

# ----------------------------
# Define color function for Yes/No/missing
# ----------------------------
def get_color(val):
    if val == "yes":
        return "#E74C3C"  # UNFPA orange
    elif val == "no":
        return "#F1C40F"  # Golden yellow
    else:
        return "#E0E0E0"  # Light gray for missing

map_data["color_2021"] = map_data["National policy on notification exists 2021 mat"].apply(get_color)
map_data["color_2024"] = map_data["National policy on notification exists 2024 mat"].apply(get_color)

# ----------------------------
# Determine progress (No in 2021 → Yes in 2024)
# ----------------------------
map_data["progress"] = map_data.apply(
    lambda row: row["National policy on notification exists 2021 mat"] == "No"
                and row["National policy on notification exists 2024 mat"] == "Yes",
    axis=1
)

# ----------------------------
# Plot side-by-side maps
# ----------------------------
fig, axes = plt.subplots(1, 2, figsize=(20, 12))

# 2021 map
map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
axes[0].axis("off")
axes[0].set_title("Maternal Policy Existence 2021", fontsize=16, weight="bold")

# 2024 map
map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
axes[1].axis("off")
axes[1].set_title("Maternal Policy Existence 2024", fontsize=16, weight="bold")

# Add blue star for progress countries
progress_countries = map_data[map_data["progress"] == True].copy()
progress_countries["geometry"] = progress_countries.centroid
progress_countries.plot(ax=axes[1], color="blue", markersize=80, marker="*", label="Progress 2021→2024")

# ----------------------------
# Shared legend
# ----------------------------
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Policy exists)"),
    mpatches.Patch(color="#F1C40F", label="No (Policy missing)"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
               markerfacecolor="blue", markersize=15)
]
fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()

map_data

# ----------------------------
# Clean perinatal columns
# ----------------------------
for col in ["National policy on notification exists 2021 peri",
            "National policy on notification exists 2024 peri"]:
    ind[col] = ind[col].astype(str).str.strip()

# ----------------------------
# Correct country names (same as before)
# ----------------------------
name_corrections = {
    "DRC": "Democratic Republic of the Congo",
    "Zanzibar": "Tanzania"
}

ind["Country"] = ind["Country"].replace(name_corrections)

# ----------------------------
# Merge with Africa shapefile
# ----------------------------
map_data_peri = africa.merge(
    ind[["Country",
         "National policy on notification exists 2021 peri",
         "National policy on notification exists 2024 peri"]],
    left_on="NAME",
    right_on="Country",
    how="left"
)

# Project to metric CRS
map_data_peri = map_data_peri.to_crs(epsg=3857)

# ----------------------------
# Define colors
# ----------------------------
def get_color(val):
    if val == "Yes":
        return "#E74C3C"  # UNFPA orange
    elif val == "No":
        return "#F1C40F"  # Golden yellow
    else:
        return "#E0E0E0"  # Light gray

map_data_peri["color_2021"] = map_data_peri["National policy on notification exists 2021 peri"].apply(get_color)
map_data_peri["color_2024"] = map_data_peri["National policy on notification exists 2024 peri"].apply(get_color)

# ----------------------------
# Determine progress (No in 2021 → Yes in 2024)
# ----------------------------
map_data_peri["progress"] = map_data_peri.apply(
    lambda row: row["National policy on notification exists 2021 peri"] == "No"
                and row["National policy on notification exists 2024 peri"] == "Yes",
    axis=1
)

# ----------------------------
# Plot side-by-side maps
# ----------------------------
fig, axes = plt.subplots(1, 2, figsize=(20, 12))

# 2021 perinatal map
map_data_peri.plot(color=map_data_peri["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
axes[0].axis("off")
axes[0].set_title("Perinatal Policy Existence 2021", fontsize=16, weight="bold")

# 2024 perinatal map
map_data_peri.plot(color=map_data_peri["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
axes[1].axis("off")
axes[1].set_title("Perinatal Policy Existence 2024", fontsize=16, weight="bold")

# Add blue star for progress countries
progress_countries = map_data_peri[map_data_peri["progress"] == True].copy()
progress_countries["geometry"] = progress_countries.centroid
progress_countries.plot(ax=axes[1], color="blue", markersize=80, marker="*", label="Progress 2021→2024")

# ----------------------------
# Shared legend
# ----------------------------
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes (Policy exists)"),
    mpatches.Patch(color="#F1C40F", label="No (Policy missing)"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
               markerfacecolor="blue", markersize=15)
]
fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()

map_data

# List of countries in ind
ind_countries = set(ind["Country"].unique())

# List of African countries in Natural Earth
africa_countries = set(africa["NAME"].unique())

# Countries in ind not in Natural Earth
missing_countries = ind_countries - africa_countries
print("Countries in ind not matched in shapefile:", missing_countries)

name_corrections = {
    "DRC": "Democratic Republic of the Congo",
    "Zanzibar": "Tanzania",
    # Add any other mismatched names here based on the missing_countries output
}

ind["Country"] = ind["Country"].replace(name_corrections)

map_data = africa.merge(
    ind[["Country",
         "National policy on notification exists 2021 peri",
         "National policy on notification exists 2024 peri"]],
    left_on="NAME",
    right_on="Country",
    how="left"
)

# Countries that still did not merge
unmerged = map_data[map_data["National policy on notification exists 2021 peri"].isna()]
print("Still unmatched countries after correction:")
print(unmerged["NAME"].tolist())

name_corrections = {
    "DRC": "Dem. Rep. Congo",
    "Zanzibar": "Tanzania",
    "South Sudan": "S. Sudan"
}

ind["Country"] = ind["Country"].replace(name_corrections)

# Countries that still did not merge
unmerged = map_data[map_data["National policy on notification exists 2021 peri"].isna()]
print("Still unmatched countries after correction:")
print(unmerged["NAME"].tolist())

ind







import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import pandas as pd

# ----------------------------
# Clean all columns in 'ind' (strip whitespace)
# ----------------------------
for col in ind.columns:
    if ind[col].dtype == object:
        ind[col] = ind[col].astype(str).str.strip()

# ----------------------------
# Correct country names to match Natural Earth
# ----------------------------
name_corrections = {
    "DRC": "Dem. Rep. Congo",
    "Zanzibar": "Tanzania",
    "South Sudan": "S. Sudan"
}

ind["Country"] = ind["Country"].replace(name_corrections)

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Merge entire 'ind' dataset with Africa shapefile
# ----------------------------
map_data_full = africa.merge(ind, left_on="NAME", right_on="Country", how="left")

# Project to metric CRS for plotting centroids if needed
map_data_full = map_data_full.to_crs(epsg=3857)

# ----------------------------
# Example: Plot any Yes/No indicator column
# ----------------------------
def plot_indicator_map(indicator_2021, indicator_2024, title_prefix):
    map_data_full["color_2021"] = map_data_full[indicator_2021].apply(
        lambda val: "#E74C3C" if val == "Yes" else ("#F1C40F" if val == "No" else "#E0E0E0")
    )
    map_data_full["color_2024"] = map_data_full[indicator_2024].apply(
        lambda val: "#E74C3C" if val == "Yes" else ("#F1C40F" if val == "No" else "#E0E0E0")
    )

    # Determine progress
    map_data_full["progress"] = map_data_full.apply(
        lambda row: row[indicator_2021] == "No" and row[indicator_2024] == "Yes",
        axis=1
    )

    # Plot side-by-side maps
    fig, axes = plt.subplots(1, 2, figsize=(20, 12))

    # 2021 map
    map_data_full.plot(color=map_data_full["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
    axes[0].axis("off")
    axes[0].set_title(f"{title_prefix} 2021", fontsize=16, weight="bold")

    # 2024 map
    map_data_full.plot(color=map_data_full["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
    axes[1].axis("off")
    axes[1].set_title(f"{title_prefix} 2024", fontsize=16, weight="bold")

    # Add progress indicator
    progress_countries = map_data_full[map_data_full["progress"] == True].copy()
    progress_countries["geometry"] = progress_countries.centroid
    progress_countries.plot(ax=axes[1], color="blue", markersize=80, marker="*", label="Progress 2021→2024")

    # Shared legend
    legend_handles = [
        mpatches.Patch(color="#E74C3C", label="Yes"),
        mpatches.Patch(color="#F1C40F", label="No"),
        mpatches.Patch(color="#E0E0E0", label="No data"),
        plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
                   markerfacecolor="blue", markersize=15)
    ]
    fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)
    plt.tight_layout(rect=[0, 0.07, 1, 1])
    plt.show()

# ----------------------------
# Example usage: plot maternal policy
# ----------------------------
plot_indicator_map(
    "National policy on notification exists 2021 mat",
    "National policy on notification exists 2024 mat",
    "Maternal Policy"
)

# Example usage: plot perinatal policy
plot_indicator_map(
    "National policy on notification exists 2021 peri",
    "National policy on notification exists 2024 peri",
    "Perinatal Policy"
)

map_data_full

col = "National policy on notification exists 2021 mat"

valid_count = map_data_full[map_data_full[col].isin(["yes", "no"])].shape[0]

print(f"Number of countries with valid data in '{col}': {valid_count}")

map_data_full

ind

map_data_full = africa.merge(ind, left_on="NAME", right_on="Country", how="left")

map_data_full

import geopandas as gpd
import pandas as pd

# ----------------------------
# Step 1: Clean all string columns in 'ind'
# ----------------------------
for col in ind.columns:
    if ind[col].dtype == object:
        ind[col] = ind[col].astype(str).str.strip()

# ----------------------------
# Step 2: Correct country names to match Natural Earth
# ----------------------------
name_corrections = {
    "DRC": "Dem. Rep. Congo",
    "Zanzibar": "Tanzania",
    "South Sudan": "S. Sudan"
}
ind["Country"] = ind["Country"].replace(name_corrections)

# ----------------------------
# Step 3: Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Step 4: Merge entire 'ind' dataset with Africa map
# ----------------------------
map_data_full = africa.merge(ind, left_on="NAME", right_on="Country", how="left")

# Optional: check the columns and first few rows
print(map_data_full.columns.tolist())
print(map_data_full.head())

map_data_full

# 1️⃣ List of all shapefile country names
africa_names = set(africa["NAME"].tolist())

# 2️⃣ List of countries in your 'ind' dataset
ind_names = set(ind["Country"].tolist())

# 3️⃣ Find unmatched countries
unmatched = [c for c in ind_names if c not in africa_names]
print("Unmatched countries:", unmatched)

# 4️⃣ Create a mapping to fix them
corrections = {
    "DRC": "Dem. Rep. Congo",
    "South Sudan": "S. Sudan",
    "Zanzibar": "Tanzania",
    # Add more mappings here for any other unmatched countries
}

ind["Country"] = ind["Country"].replace(corrections)

# 5️⃣ Merge again
map_data_full = africa.merge(ind, left_on="NAME", right_on="Country", how="left")

map_data_full

ind



ind

upload()

nim=pd.read_excel("Book2ind.xlsx")

nim

import pandas as pd

# Create a codebook for 'nim'
codebook = []

for col in nim.columns:
    unique_vals = nim[col].dropna().unique()
    codebook.append({
        "Column": col,
        "Data Type": nim[col].dtype,
        "Missing Values": nim[col].isna().sum(),
        "Unique Values": unique_vals
    })

# Convert to DataFrame for better display
codebook_df = pd.DataFrame(codebook)

# Display the codebook
pd.set_option('display.max_rows', None)
pd.set_option('display.max_colwidth', None)
print(codebook_df)

import pandas as pd
import matplotlib.pyplot as plt

# ----------------------------
# Define 2021 and 2024 Yes/No columns
# ----------------------------
policy_pairs = [
    ("National policy on notification exists 2021 mat", "National policy on notification exists 2024 mat"),
    ("National policy on review exists 2021 mat", "National policy on review exists 2024 mat"),
    ("National policy on notification exists 2021 peri", "National policy on notification exists 2024 peri"),
    ("National policy on review existss 2021 peri", "National policy on review exists 2024 peri")
]

policy_names = [
    "Mat Notification",
    "Mat Review",
    "Peri Notification",
    "Peri Review"
]

# ----------------------------
# Prepare counts for plotting
# ----------------------------
plot_data = []

for i, (col_2021, col_2024) in enumerate(policy_pairs):
    counts_2021 = nim[col_2021].value_counts()
    counts_2024 = nim[col_2024].value_counts()

    plot_data.append({
        "Policy": policy_names[i],
        "Year": "2021",
        "Yes": counts_2021.get("Yes", 0),
        "No": counts_2021.get("No", 0)
    })

    plot_data.append({
        "Policy": policy_names[i],
        "Year": "2024",
        "Yes": counts_2024.get("Yes", 0),
        "No": counts_2024.get("No", 0)
    })

df_plot = pd.DataFrame(plot_data)

# ----------------------------
# Plot grouped bar chart
# ----------------------------
fig, ax = plt.subplots(figsize=(12,6))

# Set width for bars
bar_width = 0.35
x = range(len(policy_names))

# Bars for 2021
ax.bar([p - bar_width/2 for p in x], df_plot[df_plot["Year"]=="2021"]["Yes"],
       width=bar_width, color="#E74C3C", label="Yes 2021")
ax.bar([p - bar_width/2 for p in x], df_plot[df_plot["Year"]=="2021"]["No"],
       width=bar_width, bottom=df_plot[df_plot["Year"]=="2021"]["Yes"], color="#F1C40F", label="No 2021")

# Bars for 2024
ax.bar([p + bar_width/2 for p in x], df_plot[df_plot["Year"]=="2024"]["Yes"],
       width=bar_width, color="#E74C3C", label="Yes 2024")
ax.bar([p + bar_width/2 for p in x], df_plot[df_plot["Year"]=="2024"]["No"],
       width=bar_width, bottom=df_plot[df_plot["Year"]=="2024"]["Yes"], color="#F1C40F", label="No 2024")

# Labels and formatting
ax.set_xticks(x)
ax.set_xticklabels(policy_names, rotation=0)
ax.set_ylabel("Number of Countries")
ax.set_title("Policy Status Comparison: 2021 vs 2024 (Yes/No)", fontsize=14, weight="bold")
ax.legend()

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# ----------------------------
# Define 2021 and 2024 Yes/No columns
# ----------------------------
policy_pairs = [
    ("National policy on notification exists 2021 mat", "National policy on notification exists 2024 mat"),
    ("National policy on review exists 2021 mat", "National policy on review exists 2024 mat"),
    ("National policy on notification exists 2021 peri", "National policy on notification exists 2024 peri"),
    ("National policy on review existss 2021 peri", "National policy on review exists 2024 peri")
]

policy_names = [
    "Mat Notification",
    "Mat Review",
    "Peri Notification",
    "Peri Review"
]

# ----------------------------
# Prepare counts for plotting
# ----------------------------
plot_data = []

for i, (col_2021, col_2024) in enumerate(policy_pairs):
    counts_2021 = nim[col_2021].value_counts()
    counts_2024 = nim[col_2024].value_counts()

    plot_data.append({
        "Policy": policy_names[i],
        "Year": "2021",
        "Yes": counts_2021.get("Yes", 0),
        "No": counts_2021.get("No", 0)
    })

    plot_data.append({
        "Policy": policy_names[i],
        "Year": "2024",
        "Yes": counts_2024.get("Yes", 0),
        "No": counts_2024.get("No", 0)
    })

df_plot = pd.DataFrame(plot_data)

# ----------------------------
# Plot grouped side-by-side bars
# ----------------------------
fig, ax = plt.subplots(figsize=(12,6))
bar_width = 0.2
x = np.arange(len(policy_names))

# 2021 bars
ax.bar(x - bar_width, df_plot[df_plot["Year"]=="2021"]["Yes"], width=bar_width, color="#E74C3C", label="Yes 2021", edgecolor="none")
ax.bar(x - bar_width, df_plot[df_plot["Year"]=="2021"]["No"], width=bar_width, color="#F1C40F", label="No 2021", edgecolor="none", bottom=0)

# 2024 bars
ax.bar(x, df_plot[df_plot["Year"]=="2024"]["Yes"], width=bar_width, color="#E74C3C", label="Yes 2024", edgecolor="none")
ax.bar(x, df_plot[df_plot["Year"]=="2024"]["No"], width=bar_width, color="#F1C40F", label="No 2024", edgecolor="none", bottom=0)

# Labels and formatting
ax.set_xticks(x)
ax.set_xticklabels(policy_names, rotation=0)
ax.set_ylabel("Number of Countries")
ax.set_title("Policy Status Comparison: 2021 vs 2024 (Yes/No)", fontsize=14, weight="bold")
ax.legend()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.tick_params(left=False, bottom=False)

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# ----------------------------
# Define 2021 and 2024 Yes/No columns
# ----------------------------
policy_pairs = [
    ("National policy on notification exists 2021 mat", "National policy on notification exists 2024 mat"),
    ("National policy on review exists 2021 mat", "National policy on review exists 2024 mat"),
    ("National policy on notification exists 2021 peri", "National policy on notification exists 2024 peri"),
    ("National policy on review existss 2021 peri", "National policy on review exists 2024 peri")
]

policy_names = [
    "Mat Notification",
    "Mat Review",
    "Peri Notification",
    "Peri Review"
]

# ----------------------------
# Count number of Yes per policy/year
# ----------------------------
yes_counts_2021 = [nim[col_2021].value_counts().get("Yes", 0) for col_2021, _ in policy_pairs]
yes_counts_2024 = [nim[col_2024].value_counts().get("Yes", 0) for _, col_2024 in policy_pairs]

# ----------------------------
# Plot side-by-side bars
# ----------------------------
x = np.arange(len(policy_names))
bar_width = 0.35

fig, ax = plt.subplots(figsize=(12,6))

# Bars
ax.bar(x - bar_width/2, yes_counts_2021, width=bar_width, color="#E74C3C", label="Yes 2021", edgecolor="none")
ax.bar(x + bar_width/2, yes_counts_2024, width=bar_width, color="#F1C40F", label="Yes 2024", edgecolor="none")

# Labels and formatting
ax.set_xticks(x)
ax.set_xticklabels(policy_names, rotation=0)
ax.set_ylabel("Number of Countries with Policy (Yes)")
ax.set_title("Policy Status Comparison: 2021 vs 2024", fontsize=14, weight="bold")
ax.legend()

# Clean look
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.tick_params(left=False, bottom=False)

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# ----------------------------
# Define policy column pairs
# ----------------------------
policy_pairs = [
    ("National policy on notification exists 2021 mat", "National policy on notification exists 2024 mat"),
    ("National policy on review exists 2021 mat", "National policy on review exists 2024 mat"),
    ("National policy on notification exists 2021 peri", "National policy on notification exists 2024 peri"),
    ("National policy on review existss 2021 peri", "National policy on review exists 2024 peri")
]

policy_names = [
    "Mat Notification",
    "Mat Review",
    "Peri Notification",
    "Peri Review"
]

# ----------------------------
# Count Yes and No for each policy/year
# ----------------------------
yes_2021 = [nim[col_2021].value_counts().get("Yes", 0) for col_2021, _ in policy_pairs]
no_2021 = [nim[col_2021].value_counts().get("No", 0) for col_2021, _ in policy_pairs]
yes_2024 = [nim[col_2024].value_counts().get("Yes", 0) for _, col_2024 in policy_pairs]
no_2024 = [nim[col_2024].value_counts().get("No", 0) for _, col_2024 in policy_pairs]

# ----------------------------
# Plot grouped bars
# ----------------------------
x = np.arange(len(policy_names))
bar_width = 0.2

fig, ax = plt.subplots(figsize=(12,6))

# 2021 bars
ax.bar(x - 1.5*bar_width, yes_2021, width=bar_width, color="#E74C3C", label="Yes 2021", edgecolor="none")
ax.bar(x - 0.5*bar_width, no_2021, width=bar_width, color="#F1C40F", label="No 2021", edgecolor="none")

# 2024 bars
ax.bar(x + 0.5*bar_width, yes_2024, width=bar_width, color="#C0392B", label="Yes 2024", edgecolor="none")
ax.bar(x + 1.5*bar_width, no_2024, width=bar_width, color="#F39C12", label="No 2024", edgecolor="none")

# Labels
ax.set_xticks(x)
ax.set_xticklabels(policy_names, rotation=0)
ax.set_ylabel("Number of Countries")
ax.set_title("Policy Status Comparison: 2021 vs 2024 (Yes/No)", fontsize=14, weight="bold")
ax.legend()

# Clean look
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.tick_params(left=False, bottom=False)

plt.tight_layout()
plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Correct country names if needed
# ----------------------------
country_corrections = {
    "DRC": "Dem. Rep. Congo",
    "South Sudan": "S. Sudan",
    "Eswatini": "eSwatini",
    # Add more corrections if needed
}

nim["Country"] = nim["Country"].replace(country_corrections)

# ----------------------------
# Select policy columns
# ----------------------------
col_2021 = "National policy on notification exists 2021 mat"
col_2024 = "National policy on notification exists 2024 mat"

# Merge nim with Africa geometry
map_data = africa.merge(nim[["Country", col_2021, col_2024]], left_on="NAME", right_on="Country", how="left")

# ----------------------------
# Define colors
# ----------------------------
def get_color(val):
    if val == "Yes":
        return "#E74C3C"   # Orange/red
    elif val == "No":
        return "#F1C40F"   # Golden yellow
    else:
        return "#E0E0E0"   # Light gray

map_data["color_2021"] = map_data[col_2021].apply(get_color)
map_data["color_2024"] = map_data[col_2024].apply(get_color)

# ----------------------------
# Determine progress: No → Yes
# ----------------------------
map_data["progress"] = map_data.apply(
    lambda row: row[col_2021]=="No" and row[col_2024]=="Yes", axis=1
)

# ----------------------------
# Plot maps side by side
# ----------------------------
fig, axes = plt.subplots(1, 2, figsize=(20, 12))

# 2021
map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
axes[0].axis("off")
axes[0].set_title("Maternal Notification Policy 2021", fontsize=16, weight="bold")

# 2024
map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
axes[1].axis("off")
axes[1].set_title("Maternal Notification Policy 2024", fontsize=16, weight="bold")

# Add progress marker on 2024 map
progress_countries = map_data[map_data["progress"]==True].copy()
progress_countries["geometry"] = progress_countries.centroid
progress_countries.plot(ax=axes[1], color="blue", markersize=100, marker="*", label="Progress 2021→2024")

# Shared legend
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes"),
    mpatches.Patch(color="#F1C40F", label="No"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024", markerfacecolor="blue", markersize=15)
]
fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 1])
plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Correct country names if needed
# ----------------------------
country_corrections = {
    "DRC": "Dem. Rep. Congo",
    "South Sudan": "S. Sudan",
    "Zanzibar": "Tanzania",  # optional mapping
    "Eswatini": "eSwatini",
    # add more corrections if necessary
}
nim["Country"] = nim["Country"].replace(country_corrections)

# ----------------------------
# Define policy column pairs and labels
# ----------------------------
policy_pairs = [
    ("National policy on notification exists 2021 mat", "National policy on notification exists 2024 mat"),
    ("National policy on review exists 2021 mat", "National policy on review exists 2024 mat"),
    ("National policy on notification exists 2021 peri", "National policy on notification exists 2024 peri"),
    ("National policy on review existss 2021 peri", "National policy on review exists 2024 peri")
]

policy_labels = [
    "Mat Notification",
    "Mat Review",
    "Peri Notification",
    "Peri Review"
]

# ----------------------------
# Color function
# ----------------------------
def get_color(val):
    if val == "Yes":
        return "#E74C3C"  # Orange/red
    elif val == "No":
        return "#F1C40F"  # Golden yellow
    else:
        return "#E0E0E0"  # Light gray

# ----------------------------
# Loop through each policy pair
# ----------------------------
for i, (col_2021, col_2024) in enumerate(policy_pairs):
    # Merge with Africa map
    map_data = africa.merge(nim[["Country", col_2021, col_2024]],
                            left_on="NAME", right_on="Country", how="left")

    # Assign colors
    map_data["color_2021"] = map_data[col_2021].apply(get_color)
    map_data["color_2024"] = map_data[col_2024].apply(get_color)

    # Determine progress (No -> Yes)
    map_data["progress"] = map_data.apply(
        lambda row: row[col_2021] == "No" and row[col_2024] == "Yes", axis=1
    )

    # ----------------------------
    # Plot maps side by side
    # ----------------------------
    fig, axes = plt.subplots(1, 2, figsize=(20, 12))

    # 2021 map
    map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=0.8, ax=axes[0])
    axes[0].axis("off")
    axes[0].set_title(f"{policy_labels[i]} 2021", fontsize=16, weight="bold")

    # 2024 map
    map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=0.8, ax=axes[1])
    axes[1].axis("off")
    axes[1].set_title(f"{policy_labels[i]} 2024", fontsize=16, weight="bold")

    # Add progress marker on 2024 map
    progress_countries = map_data[map_data["progress"] == True].copy()
    progress_countries["geometry"] = progress_countries.centroid
    progress_countries.plot(ax=axes[1], color="blue", markersize=100, marker="*", label="Progress 2021→2024")

    # Shared legend
    legend_handles = [
        mpatches.Patch(color="#E74C3C", label="Yes"),
        mpatches.Patch(color="#F1C40F", label="No"),
        mpatches.Patch(color="#E0E0E0", label="No data"),
        plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024",
                   markerfacecolor="blue", markersize=15)
    ]
    fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

    plt.tight_layout(rect=[0, 0.07, 1, 1])
    plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import pandas as pd

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Correct country names if needed
# ----------------------------
country_corrections = {
    "DRC": "Dem. Rep. Congo",
    "South Sudan": "S. Sudan",
    "Zanzibar": "Tanzania",
    "Eswatini": "eSwatini",
}
nim["Country"] = nim["Country"].replace(country_corrections)

# ----------------------------
# Select policy columns
# ----------------------------
col_2021 = "National policy on notification exists 2021 mat"
col_2024 = "National policy on notification exists 2024 mat"

# Merge with Africa map
map_data = africa.merge(nim[["Country", col_2021, col_2024]],
                        left_on="NAME", right_on="Country", how="left")

# ----------------------------
# Assign colors
# ----------------------------
def get_color(val):
    if val == "Yes":
        return "#E74C3C"  # Orange/red
    elif val == "No":
        return "#F1C40F"  # Golden yellow
    else:
        return "#E0E0E0"  # Light gray

map_data["color_2021"] = map_data[col_2021].apply(get_color)
map_data["color_2024"] = map_data[col_2024].apply(get_color)

# ----------------------------
# Determine progress: No -> Yes
# ----------------------------
map_data["progress"] = map_data.apply(
    lambda row: row[col_2021] == "No" and row[col_2024] == "Yes", axis=1
)

# ----------------------------
# Create figure with 2 maps + small bar graphs
# ----------------------------
fig, axes = plt.subplots(2, 2, figsize=(22, 16),
                         gridspec_kw={'height_ratios':[5,1]})

# ----------------------------
# Plot 2021 map
map_data.plot(color=map_data["color_2021"], edgecolor="black", linewidth=2, ax=axes[0,0])
axes[0,0].axis("off")
axes[0,0].set_title("Maternal Notification Policy 2021", fontsize=16, weight="bold")
# Add country labels
for x, y, label in zip(map_data.geometry.centroid.x, map_data.geometry.centroid.y, map_data["NAME"]):
    axes[0,0].text(x, y, label, fontsize=8, ha="center")

# Plot 2024 map
map_data.plot(color=map_data["color_2024"], edgecolor="black", linewidth=2, ax=axes[0,1])
axes[0,1].axis("off")
axes[0,1].set_title("Maternal Notification Policy 2024", fontsize=16, weight="bold")
# Add country labels
for x, y, label in zip(map_data.geometry.centroid.x, map_data.geometry.centroid.y, map_data["NAME"]):
    axes[0,1].text(x, y, label, fontsize=8, ha="center")

# Progress stars on 2024 map
progress_countries = map_data[map_data["progress"] == True].copy()
progress_countries["geometry"] = progress_countries.centroid
progress_countries.plot(ax=axes[0,1], color="blue", markersize=120, marker="*", label="Progress 2021→2024")

# ----------------------------
# Compute percentages for bar graphs
yes_2021 = map_data[col_2021].value_counts().get("Yes",0)
no_2021 = map_data[col_2021].value_counts().get("No",0)
yes_2024 = map_data[col_2024].value_counts().get("Yes",0)
no_2024 = map_data[col_2024].value_counts().get("No",0)
total = yes_2021+no_2021 if yes_2021+no_2021>0 else 1
yes_pct_2021, no_pct_2021 = yes_2021/total, no_2021/total
total2 = yes_2024+no_2024 if yes_2024+no_2024>0 else 1
yes_pct_2024, no_pct_2024 = yes_2024/total2, no_2024/total2

# Bar graph 2021
axes[1,0].bar(["Yes","No"], [yes_pct_2021, no_pct_2021], color=["#E74C3C","#F1C40F"])
axes[1,0].set_ylim(0,1)
axes[1,0].set_ylabel("Proportion")
axes[1,0].set_title("2021 Policy Distribution")

# Bar graph 2024
axes[1,1].bar(["Yes","No"], [yes_pct_2024, no_pct_2024], color=["#E74C3C","#F1C40F"])
axes[1,1].set_ylim(0,1)
axes[1,1].set_ylabel("Proportion")
axes[1,1].set_title("2024 Policy Distribution")

# Shared legend
legend_handles = [
    mpatches.Patch(color="#E74C3C", label="Yes"),
    mpatches.Patch(color="#F1C40F", label="No"),
    mpatches.Patch(color="#E0E0E0", label="No data"),
    plt.Line2D([0], [0], marker="*", color="w", label="Progress 2021→2024", markerfacecolor="blue", markersize=12)
]
fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

plt.tight_layout(rect=[0, 0.07, 1, 0.95])
plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import pandas as pd

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Correct country names
# ----------------------------
country_corrections = {
    "DRC": "Dem. Rep. Congo",
    "South Sudan": "S. Sudan",
    "Zanzibar": "Tanzania",
    "Eswatini": "eSwatini",
}
nim["Country"] = nim["Country"].replace(country_corrections)

# ----------------------------
# Define policy columns and labels
# ----------------------------
policy_pairs = [
    ("National policy on notification exists 2021 mat", "National policy on notification exists 2024 mat"),
    ("National policy on review exists 2021 mat", "National policy on review exists 2024 mat"),
    ("National policy on notification exists 2021 peri", "National policy on notification exists 2024 peri"),
    ("National policy on review existss 2021 peri", "National policy on review exists 2024 peri")
]

policy_labels = [
    "Mat Notification",
    "Mat Review",
    "Peri Notification",
    "Peri Review"
]

# ----------------------------
# Color function
# ----------------------------
def get_color(val):
    if val == "Yes":
        return "#E74C3C"  # Orange/red
    elif val == "No":
        return "#F1C40F"  # Golden yellow
    else:
        return "#E0E0E0"  # Light gray

# ----------------------------
# Loop through each policy
# ----------------------------
for i, (col_2021, col_2024) in enumerate(policy_pairs):
    map_data = africa.merge(nim[["Country", col_2021, col_2024]],
                            left_on="NAME", right_on="Country", how="left")

    map_data["color_2021"] = map_data[col_2021].apply(get_color)
    map_data["color_2024"] = map_data[col_2024].apply(get_color)

    map_data["progress"] = map_data.apply(
        lambda row: row[col_2021]=="No" and row[col_2024]=="Yes", axis=1
    )

    # ----------------------------
    # Figure with maps + small bar graphs
    # ----------------------------
    fig, axes = plt.subplots(2, 2, figsize=(22,16), gridspec_kw={'height_ratios':[5,1]})

    # Map 2021
    map_data.plot(color=map_data["color_2021"], edgecolor="black", linewidth=2, ax=axes[0,0])
    axes[0,0].axis("off")
    axes[0,0].set_title(f"{policy_labels[i]} 2021", fontsize=16, weight="bold")
    for x,y,label in zip(map_data.geometry.centroid.x, map_data.geometry.centroid.y, map_data["NAME"]):
        axes[0,0].text(x, y, label, fontsize=8, ha="center")

    # Map 2024
    map_data.plot(color=map_data["color_2024"], edgecolor="black", linewidth=2, ax=axes[0,1])
    axes[0,1].axis("off")
    axes[0,1].set_title(f"{policy_labels[i]} 2024", fontsize=16, weight="bold")
    for x,y,label in zip(map_data.geometry.centroid.x, map_data.geometry.centroid.y, map_data["NAME"]):
        axes[0,1].text(x, y, label, fontsize=8, ha="center")

    # Progress stars
    progress_countries = map_data[map_data["progress"]==True].copy()
    progress_countries["geometry"] = progress_countries.centroid
    progress_countries.plot(ax=axes[0,1], color="blue", markersize=100, marker="*", label="Progress 2021→2024")

    # Bar graph 2021
    yes_2021 = map_data[col_2021].value_counts().get("Yes",0)
    no_2021 = map_data[col_2021].value_counts().get("No",0)
    total_2021 = yes_2021+no_2021 if yes_2021+no_2021>0 else 1
    axes[1,0].bar(["Yes","No"], [yes_2021/total_2021, no_2021/total_2021], color=["#E74C3C","#F1C40F"])
    axes[1,0].set_ylim(0,1)
    axes[1,0].set_ylabel("Proportion")
    axes[1,0].set_title("2021 Policy Distribution")

    # Bar graph 2024
    yes_2024 = map_data[col_2024].value_counts().get("Yes",0)
    no_2024 = map_data[col_2024].value_counts().get("No",0)
    total_2024 = yes_2024+no_2024 if yes_2024+no_2024>0 else 1
    axes[1,1].bar(["Yes","No"], [yes_2024/total_2024, no_2024/total_2024], color=["#E74C3C","#F1C40F"])
    axes[1,1].set_ylim(0,1)
    axes[1,1].set_ylabel("Proportion")
    axes[1,1].set_title("2024 Policy Distribution")

    # Shared legend
    legend_handles = [
        mpatches.Patch(color="#E74C3C", label="Yes"),
        mpatches.Patch(color="#F1C40F", label="No"),
        mpatches.Patch(color="#E0E0E0", label="No data"),
        plt.Line2D([0],[0], marker="*", color="w", label="Progress 2021→2024",
                   markerfacecolor="blue", markersize=12)
    ]
    fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

    plt.tight_layout(rect=[0, 0.07, 1, 0.95])
    plt.show()

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import pandas as pd

# ----------------------------
# Load Africa shapefile
# ----------------------------
url = "https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip"
world = gpd.read_file(url)
africa = world[world["CONTINENT"] == "Africa"]

# ----------------------------
# Correct country names
# ----------------------------
country_corrections = {
    "DRC": "Dem. Rep. Congo",
    "South Sudan": "S. Sudan",
    "Zanzibar": "Tanzania",
    "Eswatini": "eSwatini",
}
nim["Country"] = nim["Country"].replace(country_corrections)

# ----------------------------
# Define policy columns and labels
# ----------------------------
policy_pairs = [
    ("National policy on notification exists 2021 mat", "National policy on notification exists 2024 mat"),
    ("National policy on review exists 2021 mat", "National policy on review exists 2024 mat"),
    ("National policy on notification exists 2021 peri", "National policy on notification exists 2024 peri"),
    ("National policy on review existss 2021 peri", "National policy on review exists 2024 peri")
]

policy_labels = [
    "Mat Notification",
    "Mat Review",
    "Peri Notification",
    "Peri Review"
]

# ----------------------------
# Color function
# ----------------------------
def get_color(val):
    if val == "Yes":
        return "#E74C3C"  # Orange/red
    elif val == "No":
        return "#F1C40F"  # Golden yellow
    else:
        return "#E0E0E0"  # Light gray

# ----------------------------
# Loop through each policy
# ----------------------------
for i, (col_2021, col_2024) in enumerate(policy_pairs):
    map_data = africa.merge(nim[["Country", col_2021, col_2024]],
                            left_on="NAME", right_on="Country", how="left")

    map_data["color_2021"] = map_data[col_2021].apply(get_color)
    map_data["color_2024"] = map_data[col_2024].apply(get_color)

    map_data["progress"] = map_data.apply(
        lambda row: row[col_2021]=="No" and row[col_2024]=="Yes", axis=1
    )

    # ----------------------------
    # Figure with maps + small bar graphs
    # ----------------------------
    fig, axes = plt.subplots(2, 2, figsize=(22,16),
                             gridspec_kw={'height_ratios':[5,0.5]})  # small bar graphs

    # Map 2021
    map_data.plot(color=map_data["color_2021"], edgecolor="white", linewidth=2, ax=axes[0,0])
    axes[0,0].axis("off")
    axes[0,0].set_title(f"{policy_labels[i]} 2021", fontsize=16, weight="bold")
    for x,y,label in zip(map_data.geometry.centroid.x, map_data.geometry.centroid.y, map_data["NAME"]):
        axes[0,0].text(x, y, label, fontsize=8, ha="center")

    # Map 2024
    map_data.plot(color=map_data["color_2024"], edgecolor="white", linewidth=2, ax=axes[0,1])
    axes[0,1].axis("off")
    axes[0,1].set_title(f"{policy_labels[i]} 2024", fontsize=16, weight="bold")
    for x,y,label in zip(map_data.geometry.centroid.x, map_data.geometry.centroid.y, map_data["NAME"]):
        axes[0,1].text(x, y, label, fontsize=8, ha="center")

    # Progress stars on 2024 map
    progress_countries = map_data[map_data["progress"]==True].copy()
    progress_countries["geometry"] = progress_countries.centroid
    progress_countries.plot(ax=axes[0,1], color="blue", markersize=100, marker="*", label="Progress 2021→2024")

    # Small bar graph 2021
    yes_2021 = map_data[col_2021].value_counts().get("Yes",0)
    no_2021 = map_data[col_2021].value_counts().get("No",0)
    total_2021 = yes_2021+no_2021 if yes_2021+no_2021>0 else 1
    axes[1,0].bar(["Yes","No"], [yes_2021/total_2021, no_2021/total_2021], color=["#E74C3C","#F1C40F"])
    axes[1,0].set_ylim(0,1)
    axes[1,0].set_ylabel("Proportion")
    axes[1,0].set_title("2021 Policy Distribution", fontsize=10)
    axes[1,0].tick_params(axis='both', which='major', labelsize=8)

    # Small bar graph 2024
    yes_2024 = map_data[col_2024].value_counts().get("Yes",0)
    no_2024 = map_data[col_2024].value_counts().get("No",0)
    total_2024 = yes_2024+no_2024 if yes_2024+no_2024>0 else 1
    axes[1,1].bar(["Yes","No"], [yes_2024/total_2024, no_2024/total_2024], color=["#E74C3C","#F1C40F"])
    axes[1,1].set_ylim(0,1)
    axes[1,1].set_ylabel("Proportion")
    axes[1,1].set_title("2024 Policy Distribution", fontsize=10)
    axes[1,1].tick_params(axis='both', which='major', labelsize=8)

    # Shared legend
    legend_handles = [
        mpatches.Patch(color="#E74C3C", label="Yes"),
        mpatches.Patch(color="#F1C40F", label="No"),
        mpatches.Patch(color="#E0E0E0", label="No data"),
        plt.Line2D([0],[0], marker="*", color="w", label="Progress 2021→2024",
                   markerfacecolor="blue", markersize=12)
    ]
    fig.legend(handles=legend_handles, loc="lower center", ncol=4, fontsize=12, frameon=False)

    plt.tight_layout(rect=[0, 0.07, 1, 0.95])
    plt.show()

